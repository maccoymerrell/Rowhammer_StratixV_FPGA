	component asmi is
		port (
			addr          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- addr
			bulk_erase    : in  std_logic                     := 'X';             -- bulk_erase
			busy          : out std_logic;                                        -- busy
			clkin         : in  std_logic                     := 'X';             -- clk
			data_valid    : out std_logic;                                        -- data_valid
			datain        : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- datain
			dataout       : out std_logic_vector(7 downto 0);                     -- dataout
			en4b_addr     : in  std_logic                     := 'X';             -- en4b_addr
			fast_read     : in  std_logic                     := 'X';             -- fast_read
			illegal_erase : out std_logic;                                        -- illegal_erase
			illegal_write : out std_logic;                                        -- illegal_write
			rden          : in  std_logic                     := 'X';             -- rden
			rdid_out      : out std_logic_vector(7 downto 0);                     -- rdid_out
			read_rdid     : in  std_logic                     := 'X';             -- read_rdid
			read_status   : in  std_logic                     := 'X';             -- read_status
			reset         : in  std_logic                     := 'X';             -- reset
			shift_bytes   : in  std_logic                     := 'X';             -- shift_bytes
			status_out    : out std_logic_vector(7 downto 0);                     -- status_out
			wren          : in  std_logic                     := 'X';             -- wren
			write         : in  std_logic                     := 'X'              -- write
		);
	end component asmi;

