// pcie_hip_avmm_mm_interconnect_4.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module pcie_hip_avmm_mm_interconnect_4 (
		input  wire         DUT_coreclkout_clk,                                                  //                                                DUT_coreclkout.clk
		input  wire         mem_if_ddr3_emif_0_afi_clk_clk,                                      //                                    mem_if_ddr3_emif_0_afi_clk.clk
		input  wire         mem_if_ddr3_emif_1_afi_clk_clk,                                      //                                    mem_if_ddr3_emif_1_afi_clk.clk
		input  wire         mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset, // mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_0_soft_reset_reset_bridge_in_reset_reset,           //           mem_if_ddr3_emif_0_soft_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset, // mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_1_soft_reset_reset_bridge_in_reset_reset,           //           mem_if_ddr3_emif_1_soft_reset_reset_bridge_in_reset.reset
		input  wire         mm_bridge_0_reset_reset_bridge_in_reset_reset,                       //                       mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [30:0]  mm_bridge_0_m0_address,                                              //                                                mm_bridge_0_m0.address
		output wire         mm_bridge_0_m0_waitrequest,                                          //                                                              .waitrequest
		input  wire [2:0]   mm_bridge_0_m0_burstcount,                                           //                                                              .burstcount
		input  wire [15:0]  mm_bridge_0_m0_byteenable,                                           //                                                              .byteenable
		input  wire         mm_bridge_0_m0_read,                                                 //                                                              .read
		output wire [127:0] mm_bridge_0_m0_readdata,                                             //                                                              .readdata
		output wire         mm_bridge_0_m0_readdatavalid,                                        //                                                              .readdatavalid
		input  wire         mm_bridge_0_m0_write,                                                //                                                              .write
		input  wire [127:0] mm_bridge_0_m0_writedata,                                            //                                                              .writedata
		input  wire         mm_bridge_0_m0_debugaccess,                                          //                                                              .debugaccess
		output wire [23:0]  mem_if_ddr3_emif_0_avl_address,                                      //                                        mem_if_ddr3_emif_0_avl.address
		output wire         mem_if_ddr3_emif_0_avl_write,                                        //                                                              .write
		output wire         mem_if_ddr3_emif_0_avl_read,                                         //                                                              .read
		input  wire [511:0] mem_if_ddr3_emif_0_avl_readdata,                                     //                                                              .readdata
		output wire [511:0] mem_if_ddr3_emif_0_avl_writedata,                                    //                                                              .writedata
		output wire         mem_if_ddr3_emif_0_avl_beginbursttransfer,                           //                                                              .beginbursttransfer
		output wire [2:0]   mem_if_ddr3_emif_0_avl_burstcount,                                   //                                                              .burstcount
		output wire [63:0]  mem_if_ddr3_emif_0_avl_byteenable,                                   //                                                              .byteenable
		input  wire         mem_if_ddr3_emif_0_avl_readdatavalid,                                //                                                              .readdatavalid
		input  wire         mem_if_ddr3_emif_0_avl_waitrequest,                                  //                                                              .waitrequest
		output wire [23:0]  mem_if_ddr3_emif_1_avl_address,                                      //                                        mem_if_ddr3_emif_1_avl.address
		output wire         mem_if_ddr3_emif_1_avl_write,                                        //                                                              .write
		output wire         mem_if_ddr3_emif_1_avl_read,                                         //                                                              .read
		input  wire [511:0] mem_if_ddr3_emif_1_avl_readdata,                                     //                                                              .readdata
		output wire [511:0] mem_if_ddr3_emif_1_avl_writedata,                                    //                                                              .writedata
		output wire         mem_if_ddr3_emif_1_avl_beginbursttransfer,                           //                                                              .beginbursttransfer
		output wire [2:0]   mem_if_ddr3_emif_1_avl_burstcount,                                   //                                                              .burstcount
		output wire [63:0]  mem_if_ddr3_emif_1_avl_byteenable,                                   //                                                              .byteenable
		input  wire         mem_if_ddr3_emif_1_avl_readdatavalid,                                //                                                              .readdatavalid
		input  wire         mem_if_ddr3_emif_1_avl_waitrequest                                   //                                                              .waitrequest
	);

	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire  [127:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [30:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire   [15:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire  [127:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [6:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire  [511:0] mem_if_ddr3_emif_0_avl_agent_m0_readdata;                          // mem_if_ddr3_emif_0_avl_translator:uav_readdata -> mem_if_ddr3_emif_0_avl_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_avl_agent_m0_waitrequest;                       // mem_if_ddr3_emif_0_avl_translator:uav_waitrequest -> mem_if_ddr3_emif_0_avl_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_0_avl_agent_m0_debugaccess;                       // mem_if_ddr3_emif_0_avl_agent:m0_debugaccess -> mem_if_ddr3_emif_0_avl_translator:uav_debugaccess
	wire   [30:0] mem_if_ddr3_emif_0_avl_agent_m0_address;                           // mem_if_ddr3_emif_0_avl_agent:m0_address -> mem_if_ddr3_emif_0_avl_translator:uav_address
	wire   [63:0] mem_if_ddr3_emif_0_avl_agent_m0_byteenable;                        // mem_if_ddr3_emif_0_avl_agent:m0_byteenable -> mem_if_ddr3_emif_0_avl_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_avl_agent_m0_read;                              // mem_if_ddr3_emif_0_avl_agent:m0_read -> mem_if_ddr3_emif_0_avl_translator:uav_read
	wire          mem_if_ddr3_emif_0_avl_agent_m0_readdatavalid;                     // mem_if_ddr3_emif_0_avl_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_avl_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_agent_m0_lock;                              // mem_if_ddr3_emif_0_avl_agent:m0_lock -> mem_if_ddr3_emif_0_avl_translator:uav_lock
	wire  [511:0] mem_if_ddr3_emif_0_avl_agent_m0_writedata;                         // mem_if_ddr3_emif_0_avl_agent:m0_writedata -> mem_if_ddr3_emif_0_avl_translator:uav_writedata
	wire          mem_if_ddr3_emif_0_avl_agent_m0_write;                             // mem_if_ddr3_emif_0_avl_agent:m0_write -> mem_if_ddr3_emif_0_avl_translator:uav_write
	wire    [8:0] mem_if_ddr3_emif_0_avl_agent_m0_burstcount;                        // mem_if_ddr3_emif_0_avl_agent:m0_burstcount -> mem_if_ddr3_emif_0_avl_translator:uav_burstcount
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_valid;                      // mem_if_ddr3_emif_0_avl_agent:rf_source_valid -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_valid
	wire  [647:0] mem_if_ddr3_emif_0_avl_agent_rf_source_data;                       // mem_if_ddr3_emif_0_avl_agent:rf_source_data -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_ready;                      // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_avl_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_startofpacket;              // mem_if_ddr3_emif_0_avl_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_endofpacket;                // mem_if_ddr3_emif_0_avl_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_valid;                   // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_avl_agent:rf_sink_valid
	wire  [647:0] mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_data;                    // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_avl_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_ready;                   // mem_if_ddr3_emif_0_avl_agent:rf_sink_ready -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_startofpacket;           // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_avl_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_endofpacket;             // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_avl_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_valid;                 // mem_if_ddr3_emif_0_avl_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_avl_agent_rdata_fifo:in_valid
	wire  [513:0] mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_data;                  // mem_if_ddr3_emif_0_avl_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_avl_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_ready;                 // mem_if_ddr3_emif_0_avl_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_src_ready
	wire  [511:0] mem_if_ddr3_emif_1_avl_agent_m0_readdata;                          // mem_if_ddr3_emif_1_avl_translator:uav_readdata -> mem_if_ddr3_emif_1_avl_agent:m0_readdata
	wire          mem_if_ddr3_emif_1_avl_agent_m0_waitrequest;                       // mem_if_ddr3_emif_1_avl_translator:uav_waitrequest -> mem_if_ddr3_emif_1_avl_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_1_avl_agent_m0_debugaccess;                       // mem_if_ddr3_emif_1_avl_agent:m0_debugaccess -> mem_if_ddr3_emif_1_avl_translator:uav_debugaccess
	wire   [30:0] mem_if_ddr3_emif_1_avl_agent_m0_address;                           // mem_if_ddr3_emif_1_avl_agent:m0_address -> mem_if_ddr3_emif_1_avl_translator:uav_address
	wire   [63:0] mem_if_ddr3_emif_1_avl_agent_m0_byteenable;                        // mem_if_ddr3_emif_1_avl_agent:m0_byteenable -> mem_if_ddr3_emif_1_avl_translator:uav_byteenable
	wire          mem_if_ddr3_emif_1_avl_agent_m0_read;                              // mem_if_ddr3_emif_1_avl_agent:m0_read -> mem_if_ddr3_emif_1_avl_translator:uav_read
	wire          mem_if_ddr3_emif_1_avl_agent_m0_readdatavalid;                     // mem_if_ddr3_emif_1_avl_translator:uav_readdatavalid -> mem_if_ddr3_emif_1_avl_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_1_avl_agent_m0_lock;                              // mem_if_ddr3_emif_1_avl_agent:m0_lock -> mem_if_ddr3_emif_1_avl_translator:uav_lock
	wire  [511:0] mem_if_ddr3_emif_1_avl_agent_m0_writedata;                         // mem_if_ddr3_emif_1_avl_agent:m0_writedata -> mem_if_ddr3_emif_1_avl_translator:uav_writedata
	wire          mem_if_ddr3_emif_1_avl_agent_m0_write;                             // mem_if_ddr3_emif_1_avl_agent:m0_write -> mem_if_ddr3_emif_1_avl_translator:uav_write
	wire    [8:0] mem_if_ddr3_emif_1_avl_agent_m0_burstcount;                        // mem_if_ddr3_emif_1_avl_agent:m0_burstcount -> mem_if_ddr3_emif_1_avl_translator:uav_burstcount
	wire          mem_if_ddr3_emif_1_avl_agent_rf_source_valid;                      // mem_if_ddr3_emif_1_avl_agent:rf_source_valid -> mem_if_ddr3_emif_1_avl_agent_rsp_fifo:in_valid
	wire  [647:0] mem_if_ddr3_emif_1_avl_agent_rf_source_data;                       // mem_if_ddr3_emif_1_avl_agent:rf_source_data -> mem_if_ddr3_emif_1_avl_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_1_avl_agent_rf_source_ready;                      // mem_if_ddr3_emif_1_avl_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_1_avl_agent:rf_source_ready
	wire          mem_if_ddr3_emif_1_avl_agent_rf_source_startofpacket;              // mem_if_ddr3_emif_1_avl_agent:rf_source_startofpacket -> mem_if_ddr3_emif_1_avl_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_1_avl_agent_rf_source_endofpacket;                // mem_if_ddr3_emif_1_avl_agent:rf_source_endofpacket -> mem_if_ddr3_emif_1_avl_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_valid;                   // mem_if_ddr3_emif_1_avl_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_1_avl_agent:rf_sink_valid
	wire  [647:0] mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_data;                    // mem_if_ddr3_emif_1_avl_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_1_avl_agent:rf_sink_data
	wire          mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_ready;                   // mem_if_ddr3_emif_1_avl_agent:rf_sink_ready -> mem_if_ddr3_emif_1_avl_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_startofpacket;           // mem_if_ddr3_emif_1_avl_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_1_avl_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_endofpacket;             // mem_if_ddr3_emif_1_avl_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_1_avl_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_valid;                 // mem_if_ddr3_emif_1_avl_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_1_avl_agent_rdata_fifo:in_valid
	wire  [513:0] mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_data;                  // mem_if_ddr3_emif_1_avl_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_1_avl_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_ready;                 // mem_if_ddr3_emif_1_avl_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_1_avl_agent:rdata_fifo_src_ready
	wire          mm_bridge_0_m0_agent_cp_valid;                                     // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [214:0] mm_bridge_0_m0_agent_cp_data;                                      // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                             // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                               // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rp_valid;                             // mem_if_ddr3_emif_0_avl_agent:rp_valid -> router_001:sink_valid
	wire  [646:0] mem_if_ddr3_emif_0_avl_agent_rp_data;                              // mem_if_ddr3_emif_0_avl_agent:rp_data -> router_001:sink_data
	wire          mem_if_ddr3_emif_0_avl_agent_rp_ready;                             // router_001:sink_ready -> mem_if_ddr3_emif_0_avl_agent:rp_ready
	wire          mem_if_ddr3_emif_0_avl_agent_rp_startofpacket;                     // mem_if_ddr3_emif_0_avl_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rp_endofpacket;                       // mem_if_ddr3_emif_0_avl_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          mem_if_ddr3_emif_1_avl_agent_rp_valid;                             // mem_if_ddr3_emif_1_avl_agent:rp_valid -> router_002:sink_valid
	wire  [646:0] mem_if_ddr3_emif_1_avl_agent_rp_data;                              // mem_if_ddr3_emif_1_avl_agent:rp_data -> router_002:sink_data
	wire          mem_if_ddr3_emif_1_avl_agent_rp_ready;                             // router_002:sink_ready -> mem_if_ddr3_emif_1_avl_agent:rp_ready
	wire          mem_if_ddr3_emif_1_avl_agent_rp_startofpacket;                     // mem_if_ddr3_emif_1_avl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          mem_if_ddr3_emif_1_avl_agent_rp_endofpacket;                       // mem_if_ddr3_emif_1_avl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [214:0] router_src_data;                                                   // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                  // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [214:0] mm_bridge_0_m0_limiter_cmd_src_data;                               // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire    [1:0] mm_bridge_0_m0_limiter_cmd_src_channel;                            // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                      // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                        // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [214:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                 // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                              // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [214:0] mm_bridge_0_m0_limiter_rsp_src_data;                               // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                              // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire    [1:0] mm_bridge_0_m0_limiter_rsp_src_channel;                            // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                      // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                        // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_valid
	wire  [214:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                 // mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid;                // mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_valid -> mem_if_ddr3_emif_0_avl_agent:cp_valid
	wire  [646:0] mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data;                 // mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_data -> mem_if_ddr3_emif_0_avl_agent:cp_data
	wire          mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready;                // mem_if_ddr3_emif_0_avl_agent:cp_ready -> mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_ready
	wire    [1:0] mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel;              // mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_channel -> mem_if_ddr3_emif_0_avl_agent:cp_channel
	wire          mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket;        // mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_startofpacket -> mem_if_ddr3_emif_0_avl_agent:cp_startofpacket
	wire          mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket;          // mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_endofpacket -> mem_if_ddr3_emif_0_avl_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                             // cmd_mux_001:src_valid -> mem_if_ddr3_emif_1_avl_cmd_width_adapter:in_valid
	wire  [214:0] cmd_mux_001_src_data;                                              // cmd_mux_001:src_data -> mem_if_ddr3_emif_1_avl_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                             // mem_if_ddr3_emif_1_avl_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                           // cmd_mux_001:src_channel -> mem_if_ddr3_emif_1_avl_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                     // cmd_mux_001:src_startofpacket -> mem_if_ddr3_emif_1_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                       // cmd_mux_001:src_endofpacket -> mem_if_ddr3_emif_1_avl_cmd_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_valid;                // mem_if_ddr3_emif_1_avl_cmd_width_adapter:out_valid -> mem_if_ddr3_emif_1_avl_agent:cp_valid
	wire  [646:0] mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_data;                 // mem_if_ddr3_emif_1_avl_cmd_width_adapter:out_data -> mem_if_ddr3_emif_1_avl_agent:cp_data
	wire          mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_ready;                // mem_if_ddr3_emif_1_avl_agent:cp_ready -> mem_if_ddr3_emif_1_avl_cmd_width_adapter:out_ready
	wire    [1:0] mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_channel;              // mem_if_ddr3_emif_1_avl_cmd_width_adapter:out_channel -> mem_if_ddr3_emif_1_avl_agent:cp_channel
	wire          mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_startofpacket;        // mem_if_ddr3_emif_1_avl_cmd_width_adapter:out_startofpacket -> mem_if_ddr3_emif_1_avl_agent:cp_startofpacket
	wire          mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_endofpacket;          // mem_if_ddr3_emif_1_avl_cmd_width_adapter:out_endofpacket -> mem_if_ddr3_emif_1_avl_agent:cp_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> mem_if_ddr3_emif_0_avl_rsp_width_adapter:in_valid
	wire  [646:0] router_001_src_data;                                               // router_001:src_data -> mem_if_ddr3_emif_0_avl_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                              // mem_if_ddr3_emif_0_avl_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                            // router_001:src_channel -> mem_if_ddr3_emif_0_avl_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> mem_if_ddr3_emif_0_avl_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> mem_if_ddr3_emif_0_avl_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_valid;                // mem_if_ddr3_emif_0_avl_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [214:0] mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_data;                 // mem_if_ddr3_emif_0_avl_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_ready;                // rsp_demux:sink_ready -> mem_if_ddr3_emif_0_avl_rsp_width_adapter:out_ready
	wire    [1:0] mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_channel;              // mem_if_ddr3_emif_0_avl_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_startofpacket;        // mem_if_ddr3_emif_0_avl_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_endofpacket;          // mem_if_ddr3_emif_0_avl_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                              // router_002:src_valid -> mem_if_ddr3_emif_1_avl_rsp_width_adapter:in_valid
	wire  [646:0] router_002_src_data;                                               // router_002:src_data -> mem_if_ddr3_emif_1_avl_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                              // mem_if_ddr3_emif_1_avl_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                            // router_002:src_channel -> mem_if_ddr3_emif_1_avl_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                      // router_002:src_startofpacket -> mem_if_ddr3_emif_1_avl_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                        // router_002:src_endofpacket -> mem_if_ddr3_emif_1_avl_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_valid;                // mem_if_ddr3_emif_1_avl_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [214:0] mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_data;                 // mem_if_ddr3_emif_1_avl_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_ready;                // rsp_demux_001:sink_ready -> mem_if_ddr3_emif_1_avl_rsp_width_adapter:out_ready
	wire    [1:0] mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_channel;              // mem_if_ddr3_emif_1_avl_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_startofpacket;        // mem_if_ddr3_emif_1_avl_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_endofpacket;          // mem_if_ddr3_emif_1_avl_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> crosser:in_valid
	wire  [214:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                              // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                 // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [214:0] crosser_out_data;                                                  // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                 // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                               // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                         // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                           // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                              // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [214:0] cmd_demux_src1_data;                                               // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                              // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                            // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                      // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                        // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                             // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [214:0] crosser_001_out_data;                                              // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                             // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                           // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                     // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                       // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [214:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                              // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                             // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [214:0] crosser_002_out_data;                                              // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                             // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                           // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                     // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                       // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                          // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire  [214:0] rsp_demux_001_src0_data;                                           // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                          // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                        // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                  // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                    // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                             // crosser_003:out_valid -> rsp_mux:sink1_valid
	wire  [214:0] crosser_003_out_data;                                              // crosser_003:out_data -> rsp_mux:sink1_data
	wire          crosser_003_out_ready;                                             // rsp_mux:sink1_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                           // crosser_003:out_channel -> rsp_mux:sink1_channel
	wire          crosser_003_out_startofpacket;                                     // crosser_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                       // crosser_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [1:0] mm_bridge_0_m0_limiter_cmd_valid_data;                             // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_valid;                 // mem_if_ddr3_emif_0_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [513:0] mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_data;                  // mem_if_ddr3_emif_0_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_ready;                 // avalon_st_adapter:in_0_ready -> mem_if_ddr3_emif_0_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                     // avalon_st_adapter:out_0_valid -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_valid
	wire  [513:0] avalon_st_adapter_out_0_data;                                      // avalon_st_adapter:out_0_data -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                     // mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                     // avalon_st_adapter:out_0_error -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_error
	wire          mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_valid;                 // mem_if_ddr3_emif_1_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [513:0] mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_data;                  // mem_if_ddr3_emif_1_avl_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_ready;                 // avalon_st_adapter_001:in_0_ready -> mem_if_ddr3_emif_1_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                 // avalon_st_adapter_001:out_0_valid -> mem_if_ddr3_emif_1_avl_agent:rdata_fifo_sink_valid
	wire  [513:0] avalon_st_adapter_001_out_0_data;                                  // avalon_st_adapter_001:out_0_data -> mem_if_ddr3_emif_1_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                 // mem_if_ddr3_emif_1_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                 // avalon_st_adapter_001:out_0_error -> mem_if_ddr3_emif_1_avl_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (7),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (DUT_coreclkout_clk),                                                //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_avl_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                      //                      clk.clk
		.reset                  (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_0_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_0_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_0_avl_agent_m0_read),                                //                         .read
		.uav_write              (mem_if_ddr3_emif_0_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_0_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_0_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_0_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_0_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_0_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_0_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_0_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_0_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_0_avl_write),                                        //                         .write
		.av_read                (mem_if_ddr3_emif_0_avl_read),                                         //                         .read
		.av_readdata            (mem_if_ddr3_emif_0_avl_readdata),                                     //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_0_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (mem_if_ddr3_emif_0_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (mem_if_ddr3_emif_0_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (mem_if_ddr3_emif_0_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_0_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_0_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_1_avl_translator (
		.clk                    (mem_if_ddr3_emif_1_afi_clk_clk),                                      //                      clk.clk
		.reset                  (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_1_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_1_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_1_avl_agent_m0_read),                                //                         .read
		.uav_write              (mem_if_ddr3_emif_1_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_1_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_1_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_1_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_1_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_1_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_1_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_1_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_1_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_1_avl_write),                                        //                         .write
		.av_read                (mem_if_ddr3_emif_1_avl_read),                                         //                         .read
		.av_readdata            (mem_if_ddr3_emif_1_avl_readdata),                                     //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_1_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (mem_if_ddr3_emif_1_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (mem_if_ddr3_emif_1_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (mem_if_ddr3_emif_1_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_1_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_1_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (214),
		.PKT_ORI_BURST_SIZE_L      (212),
		.PKT_RESPONSE_STATUS_H     (211),
		.PKT_RESPONSE_STATUS_L     (210),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_CACHE_H               (209),
		.PKT_CACHE_L               (206),
		.PKT_THREAD_ID_H           (202),
		.PKT_THREAD_ID_L           (202),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_EXCLUSIVE       (180),
		.PKT_TRANS_LOCK            (179),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (205),
		.PKT_PROTECTION_L          (203),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_ADDR_H                (174),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (175),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.PKT_TRANS_READ            (178),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (200),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (201),
		.ST_DATA_W                 (215),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (7),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (DUT_coreclkout_clk),                                                //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (646),
		.PKT_ORI_BURST_SIZE_L      (644),
		.PKT_RESPONSE_STATUS_H     (643),
		.PKT_RESPONSE_STATUS_L     (642),
		.PKT_BURST_SIZE_H          (625),
		.PKT_BURST_SIZE_L          (623),
		.PKT_TRANS_LOCK            (611),
		.PKT_BEGIN_BURST           (630),
		.PKT_PROTECTION_H          (637),
		.PKT_PROTECTION_L          (635),
		.PKT_BURSTWRAP_H           (622),
		.PKT_BURSTWRAP_L           (622),
		.PKT_BYTE_CNT_H            (621),
		.PKT_BYTE_CNT_L            (613),
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_POSTED          (608),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (632),
		.PKT_SRC_ID_L              (632),
		.PKT_DEST_ID_H             (633),
		.PKT_DEST_ID_L             (633),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (647),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_if_ddr3_emif_0_avl_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),                                      //             clk.clk
		.reset                   (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),                  //              cp.ready
		.cp_valid                (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),                  //                .valid
		.cp_data                 (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),                   //                .data
		.cp_startofpacket        (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),            //                .endofpacket
		.cp_channel              (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),                //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (648),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_agent_rdata_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (646),
		.PKT_ORI_BURST_SIZE_L      (644),
		.PKT_RESPONSE_STATUS_H     (643),
		.PKT_RESPONSE_STATUS_L     (642),
		.PKT_BURST_SIZE_H          (625),
		.PKT_BURST_SIZE_L          (623),
		.PKT_TRANS_LOCK            (611),
		.PKT_BEGIN_BURST           (630),
		.PKT_PROTECTION_H          (637),
		.PKT_PROTECTION_L          (635),
		.PKT_BURSTWRAP_H           (622),
		.PKT_BURSTWRAP_L           (622),
		.PKT_BYTE_CNT_H            (621),
		.PKT_BYTE_CNT_L            (613),
		.PKT_ADDR_H                (606),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (607),
		.PKT_TRANS_POSTED          (608),
		.PKT_TRANS_WRITE           (609),
		.PKT_TRANS_READ            (610),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (632),
		.PKT_SRC_ID_L              (632),
		.PKT_DEST_ID_H             (633),
		.PKT_DEST_ID_L             (633),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (647),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_if_ddr3_emif_1_avl_agent (
		.clk                     (mem_if_ddr3_emif_1_afi_clk_clk),                                      //             clk.clk
		.reset                   (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_1_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_1_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_1_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_1_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_1_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (mem_if_ddr3_emif_1_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_1_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_1_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_1_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_1_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (mem_if_ddr3_emif_1_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_1_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_1_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (mem_if_ddr3_emif_1_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (mem_if_ddr3_emif_1_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_1_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_ready),                  //              cp.ready
		.cp_valid                (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_valid),                  //                .valid
		.cp_data                 (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_data),                   //                .data
		.cp_startofpacket        (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_endofpacket),            //                .endofpacket
		.cp_channel              (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_channel),                //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (mem_if_ddr3_emif_1_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_1_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_1_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_1_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_1_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (648),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_1_avl_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_1_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (mem_if_ddr3_emif_1_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (mem_if_ddr3_emif_1_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_1_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_1_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_1_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_1_avl_agent_rdata_fifo (
		.clk               (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	pcie_hip_avmm_mm_interconnect_4_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (DUT_coreclkout_clk),                            //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_router_001 router_001 (
		.sink_ready         (mem_if_ddr3_emif_0_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_avl_agent_rp_valid),                               //          .valid
		.sink_data          (mem_if_ddr3_emif_0_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_router_001 router_002 (
		.sink_ready         (mem_if_ddr3_emif_1_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_1_avl_agent_rp_valid),                               //          .valid
		.sink_data          (mem_if_ddr3_emif_1_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (mem_if_ddr3_emif_1_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_1_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //       src.ready
		.src_valid          (router_002_src_valid),                                                //          .valid
		.src_data           (router_002_src_data),                                                 //          .data
		.src_channel        (router_002_src_channel),                                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (201),
		.PKT_SRC_ID_H              (200),
		.PKT_SRC_ID_L              (200),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.MAX_OUTSTANDING_RESPONSES (36),
		.PIPELINED                 (0),
		.ST_DATA_W                 (215),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (DUT_coreclkout_clk),                            //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	pcie_hip_avmm_mm_interconnect_4_cmd_demux cmd_demux (
		.clk                (DUT_coreclkout_clk),                            //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                     //           .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_cmd_mux cmd_mux (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset               (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_src_data),                                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                                 //          .channel
		.sink0_data          (crosser_out_data),                                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                              //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_cmd_mux cmd_mux_001 (
		.clk                 (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset               (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                               //          .valid
		.sink0_channel       (crosser_001_out_channel),                                             //          .channel
		.sink0_data          (crosser_001_out_data),                                                //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                          //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_rsp_demux rsp_demux (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                           //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_rsp_demux rsp_demux_001 (
		.clk                (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_4_rsp_mux rsp_mux (
		.clk                 (DUT_coreclkout_clk),                            //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                         //          .valid
		.sink0_channel       (crosser_002_out_channel),                       //          .channel
		.sink0_data          (crosser_002_out_data),                          //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                   //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                         //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                         //          .valid
		.sink1_channel       (crosser_003_out_channel),                       //          .channel
		.sink1_data          (crosser_003_out_data),                          //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (174),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (181),
		.IN_PKT_TRANS_COMPRESSED_READ  (175),
		.IN_PKT_TRANS_WRITE            (177),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (211),
		.IN_PKT_RESPONSE_STATUS_L      (210),
		.IN_PKT_TRANS_EXCLUSIVE        (180),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (212),
		.IN_PKT_ORI_BURST_SIZE_H       (214),
		.IN_ST_DATA_W                  (215),
		.OUT_PKT_ADDR_H                (606),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (621),
		.OUT_PKT_BYTE_CNT_L            (613),
		.OUT_PKT_TRANS_COMPRESSED_READ (607),
		.OUT_PKT_BURST_SIZE_H          (625),
		.OUT_PKT_BURST_SIZE_L          (623),
		.OUT_PKT_RESPONSE_STATUS_H     (643),
		.OUT_PKT_RESPONSE_STATUS_L     (642),
		.OUT_PKT_TRANS_EXCLUSIVE       (612),
		.OUT_PKT_BURST_TYPE_H          (627),
		.OUT_PKT_BURST_TYPE_L          (626),
		.OUT_PKT_ORI_BURST_SIZE_L      (644),
		.OUT_PKT_ORI_BURST_SIZE_H      (646),
		.OUT_ST_DATA_W                 (647),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_avl_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                   //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                 //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                   //          .ready
		.in_data              (cmd_mux_src_data),                                                    //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (174),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (181),
		.IN_PKT_TRANS_COMPRESSED_READ  (175),
		.IN_PKT_TRANS_WRITE            (177),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (211),
		.IN_PKT_RESPONSE_STATUS_L      (210),
		.IN_PKT_TRANS_EXCLUSIVE        (180),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (212),
		.IN_PKT_ORI_BURST_SIZE_H       (214),
		.IN_ST_DATA_W                  (215),
		.OUT_PKT_ADDR_H                (606),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (621),
		.OUT_PKT_BYTE_CNT_L            (613),
		.OUT_PKT_TRANS_COMPRESSED_READ (607),
		.OUT_PKT_BURST_SIZE_H          (625),
		.OUT_PKT_BURST_SIZE_L          (623),
		.OUT_PKT_RESPONSE_STATUS_H     (643),
		.OUT_PKT_RESPONSE_STATUS_L     (642),
		.OUT_PKT_TRANS_EXCLUSIVE       (612),
		.OUT_PKT_BURST_TYPE_H          (627),
		.OUT_PKT_BURST_TYPE_L          (626),
		.OUT_PKT_ORI_BURST_SIZE_L      (644),
		.OUT_PKT_ORI_BURST_SIZE_H      (646),
		.OUT_ST_DATA_W                 (647),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_1_avl_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                               //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                             //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                               //          .ready
		.in_data              (cmd_mux_001_src_data),                                                //          .data
		.out_endofpacket      (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_1_avl_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (606),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (621),
		.IN_PKT_BYTE_CNT_L             (613),
		.IN_PKT_TRANS_COMPRESSED_READ  (607),
		.IN_PKT_TRANS_WRITE            (609),
		.IN_PKT_BURSTWRAP_H            (622),
		.IN_PKT_BURSTWRAP_L            (622),
		.IN_PKT_BURST_SIZE_H           (625),
		.IN_PKT_BURST_SIZE_L           (623),
		.IN_PKT_RESPONSE_STATUS_H      (643),
		.IN_PKT_RESPONSE_STATUS_L      (642),
		.IN_PKT_TRANS_EXCLUSIVE        (612),
		.IN_PKT_BURST_TYPE_H           (627),
		.IN_PKT_BURST_TYPE_L           (626),
		.IN_PKT_ORI_BURST_SIZE_L       (644),
		.IN_PKT_ORI_BURST_SIZE_H       (646),
		.IN_ST_DATA_W                  (647),
		.OUT_PKT_ADDR_H                (174),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (181),
		.OUT_PKT_TRANS_COMPRESSED_READ (175),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (211),
		.OUT_PKT_RESPONSE_STATUS_L     (210),
		.OUT_PKT_TRANS_EXCLUSIVE       (180),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (212),
		.OUT_PKT_ORI_BURST_SIZE_H      (214),
		.OUT_ST_DATA_W                 (215),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_avl_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                //      sink.valid
		.in_channel           (router_001_src_channel),                                              //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                          //          .endofpacket
		.in_ready             (router_001_src_ready),                                                //          .ready
		.in_data              (router_001_src_data),                                                 //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (606),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (621),
		.IN_PKT_BYTE_CNT_L             (613),
		.IN_PKT_TRANS_COMPRESSED_READ  (607),
		.IN_PKT_TRANS_WRITE            (609),
		.IN_PKT_BURSTWRAP_H            (622),
		.IN_PKT_BURSTWRAP_L            (622),
		.IN_PKT_BURST_SIZE_H           (625),
		.IN_PKT_BURST_SIZE_L           (623),
		.IN_PKT_RESPONSE_STATUS_H      (643),
		.IN_PKT_RESPONSE_STATUS_L      (642),
		.IN_PKT_TRANS_EXCLUSIVE        (612),
		.IN_PKT_BURST_TYPE_H           (627),
		.IN_PKT_BURST_TYPE_L           (626),
		.IN_PKT_ORI_BURST_SIZE_L       (644),
		.IN_PKT_ORI_BURST_SIZE_H       (646),
		.IN_ST_DATA_W                  (647),
		.OUT_PKT_ADDR_H                (174),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (181),
		.OUT_PKT_TRANS_COMPRESSED_READ (175),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (211),
		.OUT_PKT_RESPONSE_STATUS_L     (210),
		.OUT_PKT_TRANS_EXCLUSIVE       (180),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (212),
		.OUT_PKT_ORI_BURST_SIZE_H      (214),
		.OUT_ST_DATA_W                 (215),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_1_avl_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                //      sink.valid
		.in_channel           (router_002_src_channel),                                              //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                          //          .endofpacket
		.in_ready             (router_002_src_ready),                                                //          .ready
		.in_data              (router_002_src_data),                                                 //          .data
		.out_endofpacket      (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_1_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (215),
		.BITS_PER_SYMBOL     (215),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (DUT_coreclkout_clk),                                                  //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       //  in_clk_reset.reset
		.out_clk           (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                              //              .channel
		.in_data           (cmd_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (215),
		.BITS_PER_SYMBOL     (215),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (DUT_coreclkout_clk),                                                  //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       //  in_clk_reset.reset
		.out_clk           (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                              //              .channel
		.in_data           (cmd_demux_src1_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (215),
		.BITS_PER_SYMBOL     (215),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (mem_if_ddr3_emif_0_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (DUT_coreclkout_clk),                                                  //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                              //              .channel
		.in_data           (rsp_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (215),
		.BITS_PER_SYMBOL     (215),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (mem_if_ddr3_emif_1_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (DUT_coreclkout_clk),                                                  //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_001_src0_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	pcie_hip_avmm_mm_interconnect_4_avalon_st_adapter #(
		.inBitsPerSymbol (514),
		.inUsePackets    (0),
		.inDataWidth     (514),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (514),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                        //         .error
	);

	pcie_hip_avmm_mm_interconnect_4_avalon_st_adapter #(
		.inBitsPerSymbol (514),
		.inUsePackets    (0),
		.inDataWidth     (514),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (514),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (mem_if_ddr3_emif_1_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mem_if_ddr3_emif_1_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (mem_if_ddr3_emif_1_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                    //         .error
	);

endmodule
