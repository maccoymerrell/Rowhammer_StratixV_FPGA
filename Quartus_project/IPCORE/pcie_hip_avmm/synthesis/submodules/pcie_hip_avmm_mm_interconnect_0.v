// pcie_hip_avmm_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module pcie_hip_avmm_mm_interconnect_0 (
		input  wire         DUT_coreclkout_clk,                                                  //                                                DUT_coreclkout.clk
		input  wire         mem_if_ddr3_emif_0_afi_clk_clk,                                      //                                    mem_if_ddr3_emif_0_afi_clk.clk
		input  wire         mem_if_ddr3_emif_1_afi_clk_clk,                                      //                                    mem_if_ddr3_emif_1_afi_clk.clk
		input  wire         avl_to_asmi_0_reset_reset_bridge_in_reset_reset,                     //                     avl_to_asmi_0_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset, // mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_0_soft_reset_reset_bridge_in_reset_reset,           //           mem_if_ddr3_emif_0_soft_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset, // mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset.reset
		input  wire         mem_if_ddr3_emif_1_soft_reset_reset_bridge_in_reset_reset,           //           mem_if_ddr3_emif_1_soft_reset_reset_bridge_in_reset.reset
		input  wire [63:0]  DUT_Rxm_BAR0_address,                                                //                                                  DUT_Rxm_BAR0.address
		output wire         DUT_Rxm_BAR0_waitrequest,                                            //                                                              .waitrequest
		input  wire [5:0]   DUT_Rxm_BAR0_burstcount,                                             //                                                              .burstcount
		input  wire [15:0]  DUT_Rxm_BAR0_byteenable,                                             //                                                              .byteenable
		input  wire         DUT_Rxm_BAR0_read,                                                   //                                                              .read
		output wire [127:0] DUT_Rxm_BAR0_readdata,                                               //                                                              .readdata
		output wire         DUT_Rxm_BAR0_readdatavalid,                                          //                                                              .readdatavalid
		input  wire         DUT_Rxm_BAR0_write,                                                  //                                                              .write
		input  wire [127:0] DUT_Rxm_BAR0_writedata,                                              //                                                              .writedata
		output wire [7:0]   avl_to_asmi_0_s0_address,                                            //                                              avl_to_asmi_0_s0.address
		output wire         avl_to_asmi_0_s0_write,                                              //                                                              .write
		output wire         avl_to_asmi_0_s0_read,                                               //                                                              .read
		input  wire [31:0]  avl_to_asmi_0_s0_readdata,                                           //                                                              .readdata
		output wire [31:0]  avl_to_asmi_0_s0_writedata,                                          //                                                              .writedata
		output wire [13:0]  DUT_Cra_address,                                                     //                                                       DUT_Cra.address
		output wire         DUT_Cra_write,                                                       //                                                              .write
		output wire         DUT_Cra_read,                                                        //                                                              .read
		input  wire [31:0]  DUT_Cra_readdata,                                                    //                                                              .readdata
		output wire [31:0]  DUT_Cra_writedata,                                                   //                                                              .writedata
		output wire [3:0]   DUT_Cra_byteenable,                                                  //                                                              .byteenable
		input  wire         DUT_Cra_waitrequest,                                                 //                                                              .waitrequest
		output wire         DUT_Cra_chipselect,                                                  //                                                              .chipselect
		output wire [15:0]  mem_if_ddr3_emif_0_csr_address,                                      //                                        mem_if_ddr3_emif_0_csr.address
		output wire         mem_if_ddr3_emif_0_csr_write,                                        //                                                              .write
		output wire         mem_if_ddr3_emif_0_csr_read,                                         //                                                              .read
		input  wire [31:0]  mem_if_ddr3_emif_0_csr_readdata,                                     //                                                              .readdata
		output wire [31:0]  mem_if_ddr3_emif_0_csr_writedata,                                    //                                                              .writedata
		output wire [3:0]   mem_if_ddr3_emif_0_csr_byteenable,                                   //                                                              .byteenable
		input  wire         mem_if_ddr3_emif_0_csr_readdatavalid,                                //                                                              .readdatavalid
		input  wire         mem_if_ddr3_emif_0_csr_waitrequest,                                  //                                                              .waitrequest
		output wire [15:0]  mem_if_ddr3_emif_1_csr_address,                                      //                                        mem_if_ddr3_emif_1_csr.address
		output wire         mem_if_ddr3_emif_1_csr_write,                                        //                                                              .write
		output wire         mem_if_ddr3_emif_1_csr_read,                                         //                                                              .read
		input  wire [31:0]  mem_if_ddr3_emif_1_csr_readdata,                                     //                                                              .readdata
		output wire [31:0]  mem_if_ddr3_emif_1_csr_writedata,                                    //                                                              .writedata
		output wire [3:0]   mem_if_ddr3_emif_1_csr_byteenable,                                   //                                                              .byteenable
		input  wire         mem_if_ddr3_emif_1_csr_readdatavalid,                                //                                                              .readdatavalid
		input  wire         mem_if_ddr3_emif_1_csr_waitrequest                                   //                                                              .waitrequest
	);

	wire          dut_rxm_bar0_translator_avalon_universal_master_0_waitrequest;   // DUT_Rxm_BAR0_agent:av_waitrequest -> DUT_Rxm_BAR0_translator:uav_waitrequest
	wire  [127:0] dut_rxm_bar0_translator_avalon_universal_master_0_readdata;      // DUT_Rxm_BAR0_agent:av_readdata -> DUT_Rxm_BAR0_translator:uav_readdata
	wire          dut_rxm_bar0_translator_avalon_universal_master_0_debugaccess;   // DUT_Rxm_BAR0_translator:uav_debugaccess -> DUT_Rxm_BAR0_agent:av_debugaccess
	wire   [63:0] dut_rxm_bar0_translator_avalon_universal_master_0_address;       // DUT_Rxm_BAR0_translator:uav_address -> DUT_Rxm_BAR0_agent:av_address
	wire          dut_rxm_bar0_translator_avalon_universal_master_0_read;          // DUT_Rxm_BAR0_translator:uav_read -> DUT_Rxm_BAR0_agent:av_read
	wire   [15:0] dut_rxm_bar0_translator_avalon_universal_master_0_byteenable;    // DUT_Rxm_BAR0_translator:uav_byteenable -> DUT_Rxm_BAR0_agent:av_byteenable
	wire          dut_rxm_bar0_translator_avalon_universal_master_0_readdatavalid; // DUT_Rxm_BAR0_agent:av_readdatavalid -> DUT_Rxm_BAR0_translator:uav_readdatavalid
	wire          dut_rxm_bar0_translator_avalon_universal_master_0_lock;          // DUT_Rxm_BAR0_translator:uav_lock -> DUT_Rxm_BAR0_agent:av_lock
	wire          dut_rxm_bar0_translator_avalon_universal_master_0_write;         // DUT_Rxm_BAR0_translator:uav_write -> DUT_Rxm_BAR0_agent:av_write
	wire  [127:0] dut_rxm_bar0_translator_avalon_universal_master_0_writedata;     // DUT_Rxm_BAR0_translator:uav_writedata -> DUT_Rxm_BAR0_agent:av_writedata
	wire    [9:0] dut_rxm_bar0_translator_avalon_universal_master_0_burstcount;    // DUT_Rxm_BAR0_translator:uav_burstcount -> DUT_Rxm_BAR0_agent:av_burstcount
	wire   [31:0] dut_cra_agent_m0_readdata;                                       // DUT_Cra_translator:uav_readdata -> DUT_Cra_agent:m0_readdata
	wire          dut_cra_agent_m0_waitrequest;                                    // DUT_Cra_translator:uav_waitrequest -> DUT_Cra_agent:m0_waitrequest
	wire          dut_cra_agent_m0_debugaccess;                                    // DUT_Cra_agent:m0_debugaccess -> DUT_Cra_translator:uav_debugaccess
	wire   [63:0] dut_cra_agent_m0_address;                                        // DUT_Cra_agent:m0_address -> DUT_Cra_translator:uav_address
	wire    [3:0] dut_cra_agent_m0_byteenable;                                     // DUT_Cra_agent:m0_byteenable -> DUT_Cra_translator:uav_byteenable
	wire          dut_cra_agent_m0_read;                                           // DUT_Cra_agent:m0_read -> DUT_Cra_translator:uav_read
	wire          dut_cra_agent_m0_readdatavalid;                                  // DUT_Cra_translator:uav_readdatavalid -> DUT_Cra_agent:m0_readdatavalid
	wire          dut_cra_agent_m0_lock;                                           // DUT_Cra_agent:m0_lock -> DUT_Cra_translator:uav_lock
	wire   [31:0] dut_cra_agent_m0_writedata;                                      // DUT_Cra_agent:m0_writedata -> DUT_Cra_translator:uav_writedata
	wire          dut_cra_agent_m0_write;                                          // DUT_Cra_agent:m0_write -> DUT_Cra_translator:uav_write
	wire    [2:0] dut_cra_agent_m0_burstcount;                                     // DUT_Cra_agent:m0_burstcount -> DUT_Cra_translator:uav_burstcount
	wire          dut_cra_agent_rf_source_valid;                                   // DUT_Cra_agent:rf_source_valid -> DUT_Cra_agent_rsp_fifo:in_valid
	wire  [143:0] dut_cra_agent_rf_source_data;                                    // DUT_Cra_agent:rf_source_data -> DUT_Cra_agent_rsp_fifo:in_data
	wire          dut_cra_agent_rf_source_ready;                                   // DUT_Cra_agent_rsp_fifo:in_ready -> DUT_Cra_agent:rf_source_ready
	wire          dut_cra_agent_rf_source_startofpacket;                           // DUT_Cra_agent:rf_source_startofpacket -> DUT_Cra_agent_rsp_fifo:in_startofpacket
	wire          dut_cra_agent_rf_source_endofpacket;                             // DUT_Cra_agent:rf_source_endofpacket -> DUT_Cra_agent_rsp_fifo:in_endofpacket
	wire          dut_cra_agent_rsp_fifo_out_valid;                                // DUT_Cra_agent_rsp_fifo:out_valid -> DUT_Cra_agent:rf_sink_valid
	wire  [143:0] dut_cra_agent_rsp_fifo_out_data;                                 // DUT_Cra_agent_rsp_fifo:out_data -> DUT_Cra_agent:rf_sink_data
	wire          dut_cra_agent_rsp_fifo_out_ready;                                // DUT_Cra_agent:rf_sink_ready -> DUT_Cra_agent_rsp_fifo:out_ready
	wire          dut_cra_agent_rsp_fifo_out_startofpacket;                        // DUT_Cra_agent_rsp_fifo:out_startofpacket -> DUT_Cra_agent:rf_sink_startofpacket
	wire          dut_cra_agent_rsp_fifo_out_endofpacket;                          // DUT_Cra_agent_rsp_fifo:out_endofpacket -> DUT_Cra_agent:rf_sink_endofpacket
	wire   [31:0] mem_if_ddr3_emif_1_csr_agent_m0_readdata;                        // mem_if_ddr3_emif_1_csr_translator:uav_readdata -> mem_if_ddr3_emif_1_csr_agent:m0_readdata
	wire          mem_if_ddr3_emif_1_csr_agent_m0_waitrequest;                     // mem_if_ddr3_emif_1_csr_translator:uav_waitrequest -> mem_if_ddr3_emif_1_csr_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_1_csr_agent_m0_debugaccess;                     // mem_if_ddr3_emif_1_csr_agent:m0_debugaccess -> mem_if_ddr3_emif_1_csr_translator:uav_debugaccess
	wire   [63:0] mem_if_ddr3_emif_1_csr_agent_m0_address;                         // mem_if_ddr3_emif_1_csr_agent:m0_address -> mem_if_ddr3_emif_1_csr_translator:uav_address
	wire    [3:0] mem_if_ddr3_emif_1_csr_agent_m0_byteenable;                      // mem_if_ddr3_emif_1_csr_agent:m0_byteenable -> mem_if_ddr3_emif_1_csr_translator:uav_byteenable
	wire          mem_if_ddr3_emif_1_csr_agent_m0_read;                            // mem_if_ddr3_emif_1_csr_agent:m0_read -> mem_if_ddr3_emif_1_csr_translator:uav_read
	wire          mem_if_ddr3_emif_1_csr_agent_m0_readdatavalid;                   // mem_if_ddr3_emif_1_csr_translator:uav_readdatavalid -> mem_if_ddr3_emif_1_csr_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_1_csr_agent_m0_lock;                            // mem_if_ddr3_emif_1_csr_agent:m0_lock -> mem_if_ddr3_emif_1_csr_translator:uav_lock
	wire   [31:0] mem_if_ddr3_emif_1_csr_agent_m0_writedata;                       // mem_if_ddr3_emif_1_csr_agent:m0_writedata -> mem_if_ddr3_emif_1_csr_translator:uav_writedata
	wire          mem_if_ddr3_emif_1_csr_agent_m0_write;                           // mem_if_ddr3_emif_1_csr_agent:m0_write -> mem_if_ddr3_emif_1_csr_translator:uav_write
	wire    [2:0] mem_if_ddr3_emif_1_csr_agent_m0_burstcount;                      // mem_if_ddr3_emif_1_csr_agent:m0_burstcount -> mem_if_ddr3_emif_1_csr_translator:uav_burstcount
	wire          mem_if_ddr3_emif_1_csr_agent_rf_source_valid;                    // mem_if_ddr3_emif_1_csr_agent:rf_source_valid -> mem_if_ddr3_emif_1_csr_agent_rsp_fifo:in_valid
	wire  [143:0] mem_if_ddr3_emif_1_csr_agent_rf_source_data;                     // mem_if_ddr3_emif_1_csr_agent:rf_source_data -> mem_if_ddr3_emif_1_csr_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_1_csr_agent_rf_source_ready;                    // mem_if_ddr3_emif_1_csr_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_1_csr_agent:rf_source_ready
	wire          mem_if_ddr3_emif_1_csr_agent_rf_source_startofpacket;            // mem_if_ddr3_emif_1_csr_agent:rf_source_startofpacket -> mem_if_ddr3_emif_1_csr_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_1_csr_agent_rf_source_endofpacket;              // mem_if_ddr3_emif_1_csr_agent:rf_source_endofpacket -> mem_if_ddr3_emif_1_csr_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_valid;                 // mem_if_ddr3_emif_1_csr_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_1_csr_agent:rf_sink_valid
	wire  [143:0] mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_data;                  // mem_if_ddr3_emif_1_csr_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_1_csr_agent:rf_sink_data
	wire          mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_ready;                 // mem_if_ddr3_emif_1_csr_agent:rf_sink_ready -> mem_if_ddr3_emif_1_csr_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_startofpacket;         // mem_if_ddr3_emif_1_csr_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_1_csr_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_endofpacket;           // mem_if_ddr3_emif_1_csr_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_1_csr_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_valid;               // mem_if_ddr3_emif_1_csr_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_1_csr_agent_rdata_fifo:in_valid
	wire   [33:0] mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_data;                // mem_if_ddr3_emif_1_csr_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_1_csr_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_ready;               // mem_if_ddr3_emif_1_csr_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_1_csr_agent:rdata_fifo_src_ready
	wire   [31:0] mem_if_ddr3_emif_0_csr_agent_m0_readdata;                        // mem_if_ddr3_emif_0_csr_translator:uav_readdata -> mem_if_ddr3_emif_0_csr_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_csr_agent_m0_waitrequest;                     // mem_if_ddr3_emif_0_csr_translator:uav_waitrequest -> mem_if_ddr3_emif_0_csr_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_0_csr_agent_m0_debugaccess;                     // mem_if_ddr3_emif_0_csr_agent:m0_debugaccess -> mem_if_ddr3_emif_0_csr_translator:uav_debugaccess
	wire   [63:0] mem_if_ddr3_emif_0_csr_agent_m0_address;                         // mem_if_ddr3_emif_0_csr_agent:m0_address -> mem_if_ddr3_emif_0_csr_translator:uav_address
	wire    [3:0] mem_if_ddr3_emif_0_csr_agent_m0_byteenable;                      // mem_if_ddr3_emif_0_csr_agent:m0_byteenable -> mem_if_ddr3_emif_0_csr_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_csr_agent_m0_read;                            // mem_if_ddr3_emif_0_csr_agent:m0_read -> mem_if_ddr3_emif_0_csr_translator:uav_read
	wire          mem_if_ddr3_emif_0_csr_agent_m0_readdatavalid;                   // mem_if_ddr3_emif_0_csr_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_csr_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_csr_agent_m0_lock;                            // mem_if_ddr3_emif_0_csr_agent:m0_lock -> mem_if_ddr3_emif_0_csr_translator:uav_lock
	wire   [31:0] mem_if_ddr3_emif_0_csr_agent_m0_writedata;                       // mem_if_ddr3_emif_0_csr_agent:m0_writedata -> mem_if_ddr3_emif_0_csr_translator:uav_writedata
	wire          mem_if_ddr3_emif_0_csr_agent_m0_write;                           // mem_if_ddr3_emif_0_csr_agent:m0_write -> mem_if_ddr3_emif_0_csr_translator:uav_write
	wire    [2:0] mem_if_ddr3_emif_0_csr_agent_m0_burstcount;                      // mem_if_ddr3_emif_0_csr_agent:m0_burstcount -> mem_if_ddr3_emif_0_csr_translator:uav_burstcount
	wire          mem_if_ddr3_emif_0_csr_agent_rf_source_valid;                    // mem_if_ddr3_emif_0_csr_agent:rf_source_valid -> mem_if_ddr3_emif_0_csr_agent_rsp_fifo:in_valid
	wire  [143:0] mem_if_ddr3_emif_0_csr_agent_rf_source_data;                     // mem_if_ddr3_emif_0_csr_agent:rf_source_data -> mem_if_ddr3_emif_0_csr_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_csr_agent_rf_source_ready;                    // mem_if_ddr3_emif_0_csr_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_csr_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_csr_agent_rf_source_startofpacket;            // mem_if_ddr3_emif_0_csr_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_csr_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_0_csr_agent_rf_source_endofpacket;              // mem_if_ddr3_emif_0_csr_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_csr_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_valid;                 // mem_if_ddr3_emif_0_csr_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_csr_agent:rf_sink_valid
	wire  [143:0] mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_data;                  // mem_if_ddr3_emif_0_csr_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_csr_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_ready;                 // mem_if_ddr3_emif_0_csr_agent:rf_sink_ready -> mem_if_ddr3_emif_0_csr_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_startofpacket;         // mem_if_ddr3_emif_0_csr_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_csr_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_endofpacket;           // mem_if_ddr3_emif_0_csr_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_csr_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_valid;               // mem_if_ddr3_emif_0_csr_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_csr_agent_rdata_fifo:in_valid
	wire   [33:0] mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_data;                // mem_if_ddr3_emif_0_csr_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_csr_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_ready;               // mem_if_ddr3_emif_0_csr_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_0_csr_agent:rdata_fifo_src_ready
	wire   [31:0] avl_to_asmi_0_s0_agent_m0_readdata;                              // avl_to_asmi_0_s0_translator:uav_readdata -> avl_to_asmi_0_s0_agent:m0_readdata
	wire          avl_to_asmi_0_s0_agent_m0_waitrequest;                           // avl_to_asmi_0_s0_translator:uav_waitrequest -> avl_to_asmi_0_s0_agent:m0_waitrequest
	wire          avl_to_asmi_0_s0_agent_m0_debugaccess;                           // avl_to_asmi_0_s0_agent:m0_debugaccess -> avl_to_asmi_0_s0_translator:uav_debugaccess
	wire   [63:0] avl_to_asmi_0_s0_agent_m0_address;                               // avl_to_asmi_0_s0_agent:m0_address -> avl_to_asmi_0_s0_translator:uav_address
	wire    [3:0] avl_to_asmi_0_s0_agent_m0_byteenable;                            // avl_to_asmi_0_s0_agent:m0_byteenable -> avl_to_asmi_0_s0_translator:uav_byteenable
	wire          avl_to_asmi_0_s0_agent_m0_read;                                  // avl_to_asmi_0_s0_agent:m0_read -> avl_to_asmi_0_s0_translator:uav_read
	wire          avl_to_asmi_0_s0_agent_m0_readdatavalid;                         // avl_to_asmi_0_s0_translator:uav_readdatavalid -> avl_to_asmi_0_s0_agent:m0_readdatavalid
	wire          avl_to_asmi_0_s0_agent_m0_lock;                                  // avl_to_asmi_0_s0_agent:m0_lock -> avl_to_asmi_0_s0_translator:uav_lock
	wire   [31:0] avl_to_asmi_0_s0_agent_m0_writedata;                             // avl_to_asmi_0_s0_agent:m0_writedata -> avl_to_asmi_0_s0_translator:uav_writedata
	wire          avl_to_asmi_0_s0_agent_m0_write;                                 // avl_to_asmi_0_s0_agent:m0_write -> avl_to_asmi_0_s0_translator:uav_write
	wire    [2:0] avl_to_asmi_0_s0_agent_m0_burstcount;                            // avl_to_asmi_0_s0_agent:m0_burstcount -> avl_to_asmi_0_s0_translator:uav_burstcount
	wire          avl_to_asmi_0_s0_agent_rf_source_valid;                          // avl_to_asmi_0_s0_agent:rf_source_valid -> avl_to_asmi_0_s0_agent_rsp_fifo:in_valid
	wire  [143:0] avl_to_asmi_0_s0_agent_rf_source_data;                           // avl_to_asmi_0_s0_agent:rf_source_data -> avl_to_asmi_0_s0_agent_rsp_fifo:in_data
	wire          avl_to_asmi_0_s0_agent_rf_source_ready;                          // avl_to_asmi_0_s0_agent_rsp_fifo:in_ready -> avl_to_asmi_0_s0_agent:rf_source_ready
	wire          avl_to_asmi_0_s0_agent_rf_source_startofpacket;                  // avl_to_asmi_0_s0_agent:rf_source_startofpacket -> avl_to_asmi_0_s0_agent_rsp_fifo:in_startofpacket
	wire          avl_to_asmi_0_s0_agent_rf_source_endofpacket;                    // avl_to_asmi_0_s0_agent:rf_source_endofpacket -> avl_to_asmi_0_s0_agent_rsp_fifo:in_endofpacket
	wire          avl_to_asmi_0_s0_agent_rsp_fifo_out_valid;                       // avl_to_asmi_0_s0_agent_rsp_fifo:out_valid -> avl_to_asmi_0_s0_agent:rf_sink_valid
	wire  [143:0] avl_to_asmi_0_s0_agent_rsp_fifo_out_data;                        // avl_to_asmi_0_s0_agent_rsp_fifo:out_data -> avl_to_asmi_0_s0_agent:rf_sink_data
	wire          avl_to_asmi_0_s0_agent_rsp_fifo_out_ready;                       // avl_to_asmi_0_s0_agent:rf_sink_ready -> avl_to_asmi_0_s0_agent_rsp_fifo:out_ready
	wire          avl_to_asmi_0_s0_agent_rsp_fifo_out_startofpacket;               // avl_to_asmi_0_s0_agent_rsp_fifo:out_startofpacket -> avl_to_asmi_0_s0_agent:rf_sink_startofpacket
	wire          avl_to_asmi_0_s0_agent_rsp_fifo_out_endofpacket;                 // avl_to_asmi_0_s0_agent_rsp_fifo:out_endofpacket -> avl_to_asmi_0_s0_agent:rf_sink_endofpacket
	wire          avl_to_asmi_0_s0_agent_rdata_fifo_src_valid;                     // avl_to_asmi_0_s0_agent:rdata_fifo_src_valid -> avl_to_asmi_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] avl_to_asmi_0_s0_agent_rdata_fifo_src_data;                      // avl_to_asmi_0_s0_agent:rdata_fifo_src_data -> avl_to_asmi_0_s0_agent_rdata_fifo:in_data
	wire          avl_to_asmi_0_s0_agent_rdata_fifo_src_ready;                     // avl_to_asmi_0_s0_agent_rdata_fifo:in_ready -> avl_to_asmi_0_s0_agent:rdata_fifo_src_ready
	wire          dut_rxm_bar0_agent_cp_valid;                                     // DUT_Rxm_BAR0_agent:cp_valid -> router:sink_valid
	wire  [250:0] dut_rxm_bar0_agent_cp_data;                                      // DUT_Rxm_BAR0_agent:cp_data -> router:sink_data
	wire          dut_rxm_bar0_agent_cp_ready;                                     // router:sink_ready -> DUT_Rxm_BAR0_agent:cp_ready
	wire          dut_rxm_bar0_agent_cp_startofpacket;                             // DUT_Rxm_BAR0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dut_rxm_bar0_agent_cp_endofpacket;                               // DUT_Rxm_BAR0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          dut_cra_agent_rp_valid;                                          // DUT_Cra_agent:rp_valid -> router_001:sink_valid
	wire  [142:0] dut_cra_agent_rp_data;                                           // DUT_Cra_agent:rp_data -> router_001:sink_data
	wire          dut_cra_agent_rp_ready;                                          // router_001:sink_ready -> DUT_Cra_agent:rp_ready
	wire          dut_cra_agent_rp_startofpacket;                                  // DUT_Cra_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          dut_cra_agent_rp_endofpacket;                                    // DUT_Cra_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          mem_if_ddr3_emif_1_csr_agent_rp_valid;                           // mem_if_ddr3_emif_1_csr_agent:rp_valid -> router_002:sink_valid
	wire  [142:0] mem_if_ddr3_emif_1_csr_agent_rp_data;                            // mem_if_ddr3_emif_1_csr_agent:rp_data -> router_002:sink_data
	wire          mem_if_ddr3_emif_1_csr_agent_rp_ready;                           // router_002:sink_ready -> mem_if_ddr3_emif_1_csr_agent:rp_ready
	wire          mem_if_ddr3_emif_1_csr_agent_rp_startofpacket;                   // mem_if_ddr3_emif_1_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          mem_if_ddr3_emif_1_csr_agent_rp_endofpacket;                     // mem_if_ddr3_emif_1_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          mem_if_ddr3_emif_0_csr_agent_rp_valid;                           // mem_if_ddr3_emif_0_csr_agent:rp_valid -> router_003:sink_valid
	wire  [142:0] mem_if_ddr3_emif_0_csr_agent_rp_data;                            // mem_if_ddr3_emif_0_csr_agent:rp_data -> router_003:sink_data
	wire          mem_if_ddr3_emif_0_csr_agent_rp_ready;                           // router_003:sink_ready -> mem_if_ddr3_emif_0_csr_agent:rp_ready
	wire          mem_if_ddr3_emif_0_csr_agent_rp_startofpacket;                   // mem_if_ddr3_emif_0_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          mem_if_ddr3_emif_0_csr_agent_rp_endofpacket;                     // mem_if_ddr3_emif_0_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          avl_to_asmi_0_s0_agent_rp_valid;                                 // avl_to_asmi_0_s0_agent:rp_valid -> router_004:sink_valid
	wire  [142:0] avl_to_asmi_0_s0_agent_rp_data;                                  // avl_to_asmi_0_s0_agent:rp_data -> router_004:sink_data
	wire          avl_to_asmi_0_s0_agent_rp_ready;                                 // router_004:sink_ready -> avl_to_asmi_0_s0_agent:rp_ready
	wire          avl_to_asmi_0_s0_agent_rp_startofpacket;                         // avl_to_asmi_0_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          avl_to_asmi_0_s0_agent_rp_endofpacket;                           // avl_to_asmi_0_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_src_valid;                                                // router:src_valid -> DUT_Rxm_BAR0_limiter:cmd_sink_valid
	wire  [250:0] router_src_data;                                                 // router:src_data -> DUT_Rxm_BAR0_limiter:cmd_sink_data
	wire          router_src_ready;                                                // DUT_Rxm_BAR0_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                              // router:src_channel -> DUT_Rxm_BAR0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                        // router:src_startofpacket -> DUT_Rxm_BAR0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                          // router:src_endofpacket -> DUT_Rxm_BAR0_limiter:cmd_sink_endofpacket
	wire  [250:0] dut_rxm_bar0_limiter_cmd_src_data;                               // DUT_Rxm_BAR0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          dut_rxm_bar0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> DUT_Rxm_BAR0_limiter:cmd_src_ready
	wire    [3:0] dut_rxm_bar0_limiter_cmd_src_channel;                            // DUT_Rxm_BAR0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          dut_rxm_bar0_limiter_cmd_src_startofpacket;                      // DUT_Rxm_BAR0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          dut_rxm_bar0_limiter_cmd_src_endofpacket;                        // DUT_Rxm_BAR0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                               // rsp_mux:src_valid -> DUT_Rxm_BAR0_limiter:rsp_sink_valid
	wire  [250:0] rsp_mux_src_data;                                                // rsp_mux:src_data -> DUT_Rxm_BAR0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                               // DUT_Rxm_BAR0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                             // rsp_mux:src_channel -> DUT_Rxm_BAR0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                       // rsp_mux:src_startofpacket -> DUT_Rxm_BAR0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                         // rsp_mux:src_endofpacket -> DUT_Rxm_BAR0_limiter:rsp_sink_endofpacket
	wire          dut_rxm_bar0_limiter_rsp_src_valid;                              // DUT_Rxm_BAR0_limiter:rsp_src_valid -> DUT_Rxm_BAR0_agent:rp_valid
	wire  [250:0] dut_rxm_bar0_limiter_rsp_src_data;                               // DUT_Rxm_BAR0_limiter:rsp_src_data -> DUT_Rxm_BAR0_agent:rp_data
	wire          dut_rxm_bar0_limiter_rsp_src_ready;                              // DUT_Rxm_BAR0_agent:rp_ready -> DUT_Rxm_BAR0_limiter:rsp_src_ready
	wire    [3:0] dut_rxm_bar0_limiter_rsp_src_channel;                            // DUT_Rxm_BAR0_limiter:rsp_src_channel -> DUT_Rxm_BAR0_agent:rp_channel
	wire          dut_rxm_bar0_limiter_rsp_src_startofpacket;                      // DUT_Rxm_BAR0_limiter:rsp_src_startofpacket -> DUT_Rxm_BAR0_agent:rp_startofpacket
	wire          dut_rxm_bar0_limiter_rsp_src_endofpacket;                        // DUT_Rxm_BAR0_limiter:rsp_src_endofpacket -> DUT_Rxm_BAR0_agent:rp_endofpacket
	wire          dut_cra_burst_adapter_source0_valid;                             // DUT_Cra_burst_adapter:source0_valid -> DUT_Cra_agent:cp_valid
	wire  [142:0] dut_cra_burst_adapter_source0_data;                              // DUT_Cra_burst_adapter:source0_data -> DUT_Cra_agent:cp_data
	wire          dut_cra_burst_adapter_source0_ready;                             // DUT_Cra_agent:cp_ready -> DUT_Cra_burst_adapter:source0_ready
	wire    [3:0] dut_cra_burst_adapter_source0_channel;                           // DUT_Cra_burst_adapter:source0_channel -> DUT_Cra_agent:cp_channel
	wire          dut_cra_burst_adapter_source0_startofpacket;                     // DUT_Cra_burst_adapter:source0_startofpacket -> DUT_Cra_agent:cp_startofpacket
	wire          dut_cra_burst_adapter_source0_endofpacket;                       // DUT_Cra_burst_adapter:source0_endofpacket -> DUT_Cra_agent:cp_endofpacket
	wire          mem_if_ddr3_emif_1_csr_burst_adapter_source0_valid;              // mem_if_ddr3_emif_1_csr_burst_adapter:source0_valid -> mem_if_ddr3_emif_1_csr_agent:cp_valid
	wire  [142:0] mem_if_ddr3_emif_1_csr_burst_adapter_source0_data;               // mem_if_ddr3_emif_1_csr_burst_adapter:source0_data -> mem_if_ddr3_emif_1_csr_agent:cp_data
	wire          mem_if_ddr3_emif_1_csr_burst_adapter_source0_ready;              // mem_if_ddr3_emif_1_csr_agent:cp_ready -> mem_if_ddr3_emif_1_csr_burst_adapter:source0_ready
	wire    [3:0] mem_if_ddr3_emif_1_csr_burst_adapter_source0_channel;            // mem_if_ddr3_emif_1_csr_burst_adapter:source0_channel -> mem_if_ddr3_emif_1_csr_agent:cp_channel
	wire          mem_if_ddr3_emif_1_csr_burst_adapter_source0_startofpacket;      // mem_if_ddr3_emif_1_csr_burst_adapter:source0_startofpacket -> mem_if_ddr3_emif_1_csr_agent:cp_startofpacket
	wire          mem_if_ddr3_emif_1_csr_burst_adapter_source0_endofpacket;        // mem_if_ddr3_emif_1_csr_burst_adapter:source0_endofpacket -> mem_if_ddr3_emif_1_csr_agent:cp_endofpacket
	wire          mem_if_ddr3_emif_0_csr_burst_adapter_source0_valid;              // mem_if_ddr3_emif_0_csr_burst_adapter:source0_valid -> mem_if_ddr3_emif_0_csr_agent:cp_valid
	wire  [142:0] mem_if_ddr3_emif_0_csr_burst_adapter_source0_data;               // mem_if_ddr3_emif_0_csr_burst_adapter:source0_data -> mem_if_ddr3_emif_0_csr_agent:cp_data
	wire          mem_if_ddr3_emif_0_csr_burst_adapter_source0_ready;              // mem_if_ddr3_emif_0_csr_agent:cp_ready -> mem_if_ddr3_emif_0_csr_burst_adapter:source0_ready
	wire    [3:0] mem_if_ddr3_emif_0_csr_burst_adapter_source0_channel;            // mem_if_ddr3_emif_0_csr_burst_adapter:source0_channel -> mem_if_ddr3_emif_0_csr_agent:cp_channel
	wire          mem_if_ddr3_emif_0_csr_burst_adapter_source0_startofpacket;      // mem_if_ddr3_emif_0_csr_burst_adapter:source0_startofpacket -> mem_if_ddr3_emif_0_csr_agent:cp_startofpacket
	wire          mem_if_ddr3_emif_0_csr_burst_adapter_source0_endofpacket;        // mem_if_ddr3_emif_0_csr_burst_adapter:source0_endofpacket -> mem_if_ddr3_emif_0_csr_agent:cp_endofpacket
	wire          avl_to_asmi_0_s0_burst_adapter_source0_valid;                    // avl_to_asmi_0_s0_burst_adapter:source0_valid -> avl_to_asmi_0_s0_agent:cp_valid
	wire  [142:0] avl_to_asmi_0_s0_burst_adapter_source0_data;                     // avl_to_asmi_0_s0_burst_adapter:source0_data -> avl_to_asmi_0_s0_agent:cp_data
	wire          avl_to_asmi_0_s0_burst_adapter_source0_ready;                    // avl_to_asmi_0_s0_agent:cp_ready -> avl_to_asmi_0_s0_burst_adapter:source0_ready
	wire    [3:0] avl_to_asmi_0_s0_burst_adapter_source0_channel;                  // avl_to_asmi_0_s0_burst_adapter:source0_channel -> avl_to_asmi_0_s0_agent:cp_channel
	wire          avl_to_asmi_0_s0_burst_adapter_source0_startofpacket;            // avl_to_asmi_0_s0_burst_adapter:source0_startofpacket -> avl_to_asmi_0_s0_agent:cp_startofpacket
	wire          avl_to_asmi_0_s0_burst_adapter_source0_endofpacket;              // avl_to_asmi_0_s0_burst_adapter:source0_endofpacket -> avl_to_asmi_0_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [250:0] cmd_demux_src0_data;                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                            // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [250:0] cmd_demux_src3_data;                                             // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                            // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                          // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                    // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                      // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [250:0] rsp_demux_src0_data;                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                        // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [250:0] rsp_demux_003_src0_data;                                         // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                        // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                      // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                  // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          router_001_src_valid;                                            // router_001:src_valid -> DUT_Cra_rsp_width_adapter:in_valid
	wire  [142:0] router_001_src_data;                                             // router_001:src_data -> DUT_Cra_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                            // DUT_Cra_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                          // router_001:src_channel -> DUT_Cra_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                    // router_001:src_startofpacket -> DUT_Cra_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                      // router_001:src_endofpacket -> DUT_Cra_rsp_width_adapter:in_endofpacket
	wire          dut_cra_rsp_width_adapter_src_valid;                             // DUT_Cra_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [250:0] dut_cra_rsp_width_adapter_src_data;                              // DUT_Cra_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          dut_cra_rsp_width_adapter_src_ready;                             // rsp_demux:sink_ready -> DUT_Cra_rsp_width_adapter:out_ready
	wire    [3:0] dut_cra_rsp_width_adapter_src_channel;                           // DUT_Cra_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          dut_cra_rsp_width_adapter_src_startofpacket;                     // DUT_Cra_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          dut_cra_rsp_width_adapter_src_endofpacket;                       // DUT_Cra_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                            // router_002:src_valid -> mem_if_ddr3_emif_1_csr_rsp_width_adapter:in_valid
	wire  [142:0] router_002_src_data;                                             // router_002:src_data -> mem_if_ddr3_emif_1_csr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                            // mem_if_ddr3_emif_1_csr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                          // router_002:src_channel -> mem_if_ddr3_emif_1_csr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                    // router_002:src_startofpacket -> mem_if_ddr3_emif_1_csr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                      // router_002:src_endofpacket -> mem_if_ddr3_emif_1_csr_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_valid;              // mem_if_ddr3_emif_1_csr_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [250:0] mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_data;               // mem_if_ddr3_emif_1_csr_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_ready;              // rsp_demux_001:sink_ready -> mem_if_ddr3_emif_1_csr_rsp_width_adapter:out_ready
	wire    [3:0] mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_channel;            // mem_if_ddr3_emif_1_csr_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_startofpacket;      // mem_if_ddr3_emif_1_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_endofpacket;        // mem_if_ddr3_emif_1_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                            // router_003:src_valid -> mem_if_ddr3_emif_0_csr_rsp_width_adapter:in_valid
	wire  [142:0] router_003_src_data;                                             // router_003:src_data -> mem_if_ddr3_emif_0_csr_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                            // mem_if_ddr3_emif_0_csr_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                          // router_003:src_channel -> mem_if_ddr3_emif_0_csr_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                    // router_003:src_startofpacket -> mem_if_ddr3_emif_0_csr_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                      // router_003:src_endofpacket -> mem_if_ddr3_emif_0_csr_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_valid;              // mem_if_ddr3_emif_0_csr_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [250:0] mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_data;               // mem_if_ddr3_emif_0_csr_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_ready;              // rsp_demux_002:sink_ready -> mem_if_ddr3_emif_0_csr_rsp_width_adapter:out_ready
	wire    [3:0] mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_channel;            // mem_if_ddr3_emif_0_csr_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_startofpacket;      // mem_if_ddr3_emif_0_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_endofpacket;        // mem_if_ddr3_emif_0_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                            // router_004:src_valid -> avl_to_asmi_0_s0_rsp_width_adapter:in_valid
	wire  [142:0] router_004_src_data;                                             // router_004:src_data -> avl_to_asmi_0_s0_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                            // avl_to_asmi_0_s0_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                          // router_004:src_channel -> avl_to_asmi_0_s0_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                    // router_004:src_startofpacket -> avl_to_asmi_0_s0_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                      // router_004:src_endofpacket -> avl_to_asmi_0_s0_rsp_width_adapter:in_endofpacket
	wire          avl_to_asmi_0_s0_rsp_width_adapter_src_valid;                    // avl_to_asmi_0_s0_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [250:0] avl_to_asmi_0_s0_rsp_width_adapter_src_data;                     // avl_to_asmi_0_s0_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          avl_to_asmi_0_s0_rsp_width_adapter_src_ready;                    // rsp_demux_003:sink_ready -> avl_to_asmi_0_s0_rsp_width_adapter:out_ready
	wire    [3:0] avl_to_asmi_0_s0_rsp_width_adapter_src_channel;                  // avl_to_asmi_0_s0_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          avl_to_asmi_0_s0_rsp_width_adapter_src_startofpacket;            // avl_to_asmi_0_s0_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          avl_to_asmi_0_s0_rsp_width_adapter_src_endofpacket;              // avl_to_asmi_0_s0_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_src_valid;                                               // cmd_mux:src_valid -> DUT_Cra_cmd_width_adapter:in_valid
	wire  [250:0] cmd_mux_src_data;                                                // cmd_mux:src_data -> DUT_Cra_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                               // DUT_Cra_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                             // cmd_mux:src_channel -> DUT_Cra_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                       // cmd_mux:src_startofpacket -> DUT_Cra_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                         // cmd_mux:src_endofpacket -> DUT_Cra_cmd_width_adapter:in_endofpacket
	wire          dut_cra_cmd_width_adapter_src_valid;                             // DUT_Cra_cmd_width_adapter:out_valid -> DUT_Cra_burst_adapter:sink0_valid
	wire  [142:0] dut_cra_cmd_width_adapter_src_data;                              // DUT_Cra_cmd_width_adapter:out_data -> DUT_Cra_burst_adapter:sink0_data
	wire          dut_cra_cmd_width_adapter_src_ready;                             // DUT_Cra_burst_adapter:sink0_ready -> DUT_Cra_cmd_width_adapter:out_ready
	wire    [3:0] dut_cra_cmd_width_adapter_src_channel;                           // DUT_Cra_cmd_width_adapter:out_channel -> DUT_Cra_burst_adapter:sink0_channel
	wire          dut_cra_cmd_width_adapter_src_startofpacket;                     // DUT_Cra_cmd_width_adapter:out_startofpacket -> DUT_Cra_burst_adapter:sink0_startofpacket
	wire          dut_cra_cmd_width_adapter_src_endofpacket;                       // DUT_Cra_cmd_width_adapter:out_endofpacket -> DUT_Cra_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                           // cmd_mux_001:src_valid -> mem_if_ddr3_emif_1_csr_cmd_width_adapter:in_valid
	wire  [250:0] cmd_mux_001_src_data;                                            // cmd_mux_001:src_data -> mem_if_ddr3_emif_1_csr_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                           // mem_if_ddr3_emif_1_csr_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                         // cmd_mux_001:src_channel -> mem_if_ddr3_emif_1_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                   // cmd_mux_001:src_startofpacket -> mem_if_ddr3_emif_1_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                     // cmd_mux_001:src_endofpacket -> mem_if_ddr3_emif_1_csr_cmd_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_valid;              // mem_if_ddr3_emif_1_csr_cmd_width_adapter:out_valid -> mem_if_ddr3_emif_1_csr_burst_adapter:sink0_valid
	wire  [142:0] mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_data;               // mem_if_ddr3_emif_1_csr_cmd_width_adapter:out_data -> mem_if_ddr3_emif_1_csr_burst_adapter:sink0_data
	wire          mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_ready;              // mem_if_ddr3_emif_1_csr_burst_adapter:sink0_ready -> mem_if_ddr3_emif_1_csr_cmd_width_adapter:out_ready
	wire    [3:0] mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_channel;            // mem_if_ddr3_emif_1_csr_cmd_width_adapter:out_channel -> mem_if_ddr3_emif_1_csr_burst_adapter:sink0_channel
	wire          mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_startofpacket;      // mem_if_ddr3_emif_1_csr_cmd_width_adapter:out_startofpacket -> mem_if_ddr3_emif_1_csr_burst_adapter:sink0_startofpacket
	wire          mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_endofpacket;        // mem_if_ddr3_emif_1_csr_cmd_width_adapter:out_endofpacket -> mem_if_ddr3_emif_1_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                           // cmd_mux_002:src_valid -> mem_if_ddr3_emif_0_csr_cmd_width_adapter:in_valid
	wire  [250:0] cmd_mux_002_src_data;                                            // cmd_mux_002:src_data -> mem_if_ddr3_emif_0_csr_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                           // mem_if_ddr3_emif_0_csr_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                         // cmd_mux_002:src_channel -> mem_if_ddr3_emif_0_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                   // cmd_mux_002:src_startofpacket -> mem_if_ddr3_emif_0_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                     // cmd_mux_002:src_endofpacket -> mem_if_ddr3_emif_0_csr_cmd_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_valid;              // mem_if_ddr3_emif_0_csr_cmd_width_adapter:out_valid -> mem_if_ddr3_emif_0_csr_burst_adapter:sink0_valid
	wire  [142:0] mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_data;               // mem_if_ddr3_emif_0_csr_cmd_width_adapter:out_data -> mem_if_ddr3_emif_0_csr_burst_adapter:sink0_data
	wire          mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_ready;              // mem_if_ddr3_emif_0_csr_burst_adapter:sink0_ready -> mem_if_ddr3_emif_0_csr_cmd_width_adapter:out_ready
	wire    [3:0] mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_channel;            // mem_if_ddr3_emif_0_csr_cmd_width_adapter:out_channel -> mem_if_ddr3_emif_0_csr_burst_adapter:sink0_channel
	wire          mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_startofpacket;      // mem_if_ddr3_emif_0_csr_cmd_width_adapter:out_startofpacket -> mem_if_ddr3_emif_0_csr_burst_adapter:sink0_startofpacket
	wire          mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_endofpacket;        // mem_if_ddr3_emif_0_csr_cmd_width_adapter:out_endofpacket -> mem_if_ddr3_emif_0_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                           // cmd_mux_003:src_valid -> avl_to_asmi_0_s0_cmd_width_adapter:in_valid
	wire  [250:0] cmd_mux_003_src_data;                                            // cmd_mux_003:src_data -> avl_to_asmi_0_s0_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                           // avl_to_asmi_0_s0_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                         // cmd_mux_003:src_channel -> avl_to_asmi_0_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                   // cmd_mux_003:src_startofpacket -> avl_to_asmi_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                     // cmd_mux_003:src_endofpacket -> avl_to_asmi_0_s0_cmd_width_adapter:in_endofpacket
	wire          avl_to_asmi_0_s0_cmd_width_adapter_src_valid;                    // avl_to_asmi_0_s0_cmd_width_adapter:out_valid -> avl_to_asmi_0_s0_burst_adapter:sink0_valid
	wire  [142:0] avl_to_asmi_0_s0_cmd_width_adapter_src_data;                     // avl_to_asmi_0_s0_cmd_width_adapter:out_data -> avl_to_asmi_0_s0_burst_adapter:sink0_data
	wire          avl_to_asmi_0_s0_cmd_width_adapter_src_ready;                    // avl_to_asmi_0_s0_burst_adapter:sink0_ready -> avl_to_asmi_0_s0_cmd_width_adapter:out_ready
	wire    [3:0] avl_to_asmi_0_s0_cmd_width_adapter_src_channel;                  // avl_to_asmi_0_s0_cmd_width_adapter:out_channel -> avl_to_asmi_0_s0_burst_adapter:sink0_channel
	wire          avl_to_asmi_0_s0_cmd_width_adapter_src_startofpacket;            // avl_to_asmi_0_s0_cmd_width_adapter:out_startofpacket -> avl_to_asmi_0_s0_burst_adapter:sink0_startofpacket
	wire          avl_to_asmi_0_s0_cmd_width_adapter_src_endofpacket;              // avl_to_asmi_0_s0_cmd_width_adapter:out_endofpacket -> avl_to_asmi_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                            // cmd_demux:src1_valid -> crosser:in_valid
	wire  [250:0] cmd_demux_src1_data;                                             // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                            // crosser:in_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                          // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                    // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                      // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                               // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [250:0] crosser_out_data;                                                // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                               // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire    [3:0] crosser_out_channel;                                             // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                       // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                         // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                            // cmd_demux:src2_valid -> crosser_001:in_valid
	wire  [250:0] cmd_demux_src2_data;                                             // cmd_demux:src2_data -> crosser_001:in_data
	wire          cmd_demux_src2_ready;                                            // crosser_001:in_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                          // cmd_demux:src2_channel -> crosser_001:in_channel
	wire          cmd_demux_src2_startofpacket;                                    // cmd_demux:src2_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                      // cmd_demux:src2_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                           // crosser_001:out_valid -> cmd_mux_002:sink0_valid
	wire  [250:0] crosser_001_out_data;                                            // crosser_001:out_data -> cmd_mux_002:sink0_data
	wire          crosser_001_out_ready;                                           // cmd_mux_002:sink0_ready -> crosser_001:out_ready
	wire    [3:0] crosser_001_out_channel;                                         // crosser_001:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_001_out_startofpacket;                                   // crosser_001:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                     // crosser_001:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                        // rsp_demux_001:src0_valid -> crosser_002:in_valid
	wire  [250:0] rsp_demux_001_src0_data;                                         // rsp_demux_001:src0_data -> crosser_002:in_data
	wire          rsp_demux_001_src0_ready;                                        // crosser_002:in_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                      // rsp_demux_001:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                // rsp_demux_001:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                  // rsp_demux_001:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                           // crosser_002:out_valid -> rsp_mux:sink1_valid
	wire  [250:0] crosser_002_out_data;                                            // crosser_002:out_data -> rsp_mux:sink1_data
	wire          crosser_002_out_ready;                                           // rsp_mux:sink1_ready -> crosser_002:out_ready
	wire    [3:0] crosser_002_out_channel;                                         // crosser_002:out_channel -> rsp_mux:sink1_channel
	wire          crosser_002_out_startofpacket;                                   // crosser_002:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                     // crosser_002:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                        // rsp_demux_002:src0_valid -> crosser_003:in_valid
	wire  [250:0] rsp_demux_002_src0_data;                                         // rsp_demux_002:src0_data -> crosser_003:in_data
	wire          rsp_demux_002_src0_ready;                                        // crosser_003:in_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                      // rsp_demux_002:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                // rsp_demux_002:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                  // rsp_demux_002:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                           // crosser_003:out_valid -> rsp_mux:sink2_valid
	wire  [250:0] crosser_003_out_data;                                            // crosser_003:out_data -> rsp_mux:sink2_data
	wire          crosser_003_out_ready;                                           // rsp_mux:sink2_ready -> crosser_003:out_ready
	wire    [3:0] crosser_003_out_channel;                                         // crosser_003:out_channel -> rsp_mux:sink2_channel
	wire          crosser_003_out_startofpacket;                                   // crosser_003:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                     // crosser_003:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire    [3:0] dut_rxm_bar0_limiter_cmd_valid_data;                             // DUT_Rxm_BAR0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          dut_cra_agent_rdata_fifo_src_valid;                              // DUT_Cra_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] dut_cra_agent_rdata_fifo_src_data;                               // DUT_Cra_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          dut_cra_agent_rdata_fifo_src_ready;                              // avalon_st_adapter:in_0_ready -> DUT_Cra_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                   // avalon_st_adapter:out_0_valid -> DUT_Cra_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                    // avalon_st_adapter:out_0_data -> DUT_Cra_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                   // DUT_Cra_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                   // avalon_st_adapter:out_0_error -> DUT_Cra_agent:rdata_fifo_sink_error
	wire          mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_valid;               // mem_if_ddr3_emif_1_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_data;                // mem_if_ddr3_emif_1_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_ready;               // avalon_st_adapter_001:in_0_ready -> mem_if_ddr3_emif_1_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                               // avalon_st_adapter_001:out_0_valid -> mem_if_ddr3_emif_1_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                // avalon_st_adapter_001:out_0_data -> mem_if_ddr3_emif_1_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                               // mem_if_ddr3_emif_1_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                               // avalon_st_adapter_001:out_0_error -> mem_if_ddr3_emif_1_csr_agent:rdata_fifo_sink_error
	wire          mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_valid;               // mem_if_ddr3_emif_0_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_data;                // mem_if_ddr3_emif_0_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_ready;               // avalon_st_adapter_002:in_0_ready -> mem_if_ddr3_emif_0_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                               // avalon_st_adapter_002:out_0_valid -> mem_if_ddr3_emif_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                // avalon_st_adapter_002:out_0_data -> mem_if_ddr3_emif_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                               // mem_if_ddr3_emif_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                               // avalon_st_adapter_002:out_0_error -> mem_if_ddr3_emif_0_csr_agent:rdata_fifo_sink_error
	wire          avl_to_asmi_0_s0_agent_rdata_fifo_out_valid;                     // avl_to_asmi_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] avl_to_asmi_0_s0_agent_rdata_fifo_out_data;                      // avl_to_asmi_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          avl_to_asmi_0_s0_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_003:in_0_ready -> avl_to_asmi_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                               // avalon_st_adapter_003:out_0_valid -> avl_to_asmi_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                // avalon_st_adapter_003:out_0_data -> avl_to_asmi_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                               // avl_to_asmi_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                               // avalon_st_adapter_003:out_0_error -> avl_to_asmi_0_s0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dut_rxm_bar0_translator (
		.clk                    (DUT_coreclkout_clk),                                              //                       clk.clk
		.reset                  (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address            (dut_rxm_bar0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dut_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dut_rxm_bar0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dut_rxm_bar0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dut_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dut_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dut_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dut_rxm_bar0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dut_rxm_bar0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dut_rxm_bar0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dut_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (DUT_Rxm_BAR0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (DUT_Rxm_BAR0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (DUT_Rxm_BAR0_burstcount),                                         //                          .burstcount
		.av_byteenable          (DUT_Rxm_BAR0_byteenable),                                         //                          .byteenable
		.av_read                (DUT_Rxm_BAR0_read),                                               //                          .read
		.av_readdata            (DUT_Rxm_BAR0_readdata),                                           //                          .readdata
		.av_readdatavalid       (DUT_Rxm_BAR0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (DUT_Rxm_BAR0_write),                                              //                          .write
		.av_writedata           (DUT_Rxm_BAR0_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dut_cra_translator (
		.clk                    (DUT_coreclkout_clk),                              //                      clk.clk
		.reset                  (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dut_cra_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (dut_cra_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (dut_cra_agent_m0_read),                           //                         .read
		.uav_write              (dut_cra_agent_m0_write),                          //                         .write
		.uav_waitrequest        (dut_cra_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (dut_cra_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (dut_cra_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (dut_cra_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (dut_cra_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (dut_cra_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (dut_cra_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (DUT_Cra_address),                                 //      avalon_anti_slave_0.address
		.av_write               (DUT_Cra_write),                                   //                         .write
		.av_read                (DUT_Cra_read),                                    //                         .read
		.av_readdata            (DUT_Cra_readdata),                                //                         .readdata
		.av_writedata           (DUT_Cra_writedata),                               //                         .writedata
		.av_byteenable          (DUT_Cra_byteenable),                              //                         .byteenable
		.av_waitrequest         (DUT_Cra_waitrequest),                             //                         .waitrequest
		.av_chipselect          (DUT_Cra_chipselect),                              //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_1_csr_translator (
		.clk                    (mem_if_ddr3_emif_1_afi_clk_clk),                                      //                      clk.clk
		.reset                  (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_1_csr_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_1_csr_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_1_csr_agent_m0_read),                                //                         .read
		.uav_write              (mem_if_ddr3_emif_1_csr_agent_m0_write),                               //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_1_csr_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_1_csr_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_1_csr_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_1_csr_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_1_csr_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_1_csr_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_1_csr_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_1_csr_address),                                      //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_1_csr_write),                                        //                         .write
		.av_read                (mem_if_ddr3_emif_1_csr_read),                                         //                         .read
		.av_readdata            (mem_if_ddr3_emif_1_csr_readdata),                                     //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_1_csr_writedata),                                    //                         .writedata
		.av_byteenable          (mem_if_ddr3_emif_1_csr_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_1_csr_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_1_csr_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_csr_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                      //                      clk.clk
		.reset                  (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_0_csr_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_0_csr_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_0_csr_agent_m0_read),                                //                         .read
		.uav_write              (mem_if_ddr3_emif_0_csr_agent_m0_write),                               //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_0_csr_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_0_csr_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_0_csr_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_0_csr_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_0_csr_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_0_csr_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_0_csr_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_0_csr_address),                                      //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_0_csr_write),                                        //                         .write
		.av_read                (mem_if_ddr3_emif_0_csr_read),                                         //                         .read
		.av_readdata            (mem_if_ddr3_emif_0_csr_readdata),                                     //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_0_csr_writedata),                                    //                         .writedata
		.av_byteenable          (mem_if_ddr3_emif_0_csr_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_0_csr_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_0_csr_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_to_asmi_0_s0_translator (
		.clk                    (DUT_coreclkout_clk),                              //                      clk.clk
		.reset                  (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_to_asmi_0_s0_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (avl_to_asmi_0_s0_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (avl_to_asmi_0_s0_agent_m0_read),                  //                         .read
		.uav_write              (avl_to_asmi_0_s0_agent_m0_write),                 //                         .write
		.uav_waitrequest        (avl_to_asmi_0_s0_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (avl_to_asmi_0_s0_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (avl_to_asmi_0_s0_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (avl_to_asmi_0_s0_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (avl_to_asmi_0_s0_agent_m0_writedata),             //                         .writedata
		.uav_lock               (avl_to_asmi_0_s0_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (avl_to_asmi_0_s0_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (avl_to_asmi_0_s0_address),                        //      avalon_anti_slave_0.address
		.av_write               (avl_to_asmi_0_s0_write),                          //                         .write
		.av_read                (avl_to_asmi_0_s0_read),                           //                         .read
		.av_readdata            (avl_to_asmi_0_s0_readdata),                       //                         .readdata
		.av_writedata           (avl_to_asmi_0_s0_writedata),                      //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (250),
		.PKT_ORI_BURST_SIZE_L      (248),
		.PKT_RESPONSE_STATUS_H     (247),
		.PKT_RESPONSE_STATUS_L     (246),
		.PKT_QOS_H                 (233),
		.PKT_QOS_L                 (233),
		.PKT_DATA_SIDEBAND_H       (231),
		.PKT_DATA_SIDEBAND_L       (231),
		.PKT_ADDR_SIDEBAND_H       (230),
		.PKT_ADDR_SIDEBAND_L       (230),
		.PKT_BURST_TYPE_H          (229),
		.PKT_BURST_TYPE_L          (228),
		.PKT_CACHE_H               (245),
		.PKT_CACHE_L               (242),
		.PKT_THREAD_ID_H           (238),
		.PKT_THREAD_ID_L           (238),
		.PKT_BURST_SIZE_H          (227),
		.PKT_BURST_SIZE_L          (225),
		.PKT_TRANS_EXCLUSIVE       (213),
		.PKT_TRANS_LOCK            (212),
		.PKT_BEGIN_BURST           (232),
		.PKT_PROTECTION_H          (241),
		.PKT_PROTECTION_L          (239),
		.PKT_BURSTWRAP_H           (224),
		.PKT_BURSTWRAP_L           (224),
		.PKT_BYTE_CNT_H            (223),
		.PKT_BYTE_CNT_L            (214),
		.PKT_ADDR_H                (207),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (208),
		.PKT_TRANS_POSTED          (209),
		.PKT_TRANS_WRITE           (210),
		.PKT_TRANS_READ            (211),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (235),
		.PKT_SRC_ID_L              (234),
		.PKT_DEST_ID_H             (237),
		.PKT_DEST_ID_L             (236),
		.ST_DATA_W                 (251),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dut_rxm_bar0_agent (
		.clk                   (DUT_coreclkout_clk),                                              //       clk.clk
		.reset                 (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.av_address            (dut_rxm_bar0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dut_rxm_bar0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dut_rxm_bar0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dut_rxm_bar0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dut_rxm_bar0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dut_rxm_bar0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dut_rxm_bar0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dut_rxm_bar0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dut_rxm_bar0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dut_rxm_bar0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dut_rxm_bar0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dut_rxm_bar0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dut_rxm_bar0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dut_rxm_bar0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dut_rxm_bar0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dut_rxm_bar0_agent_cp_ready),                                     //          .ready
		.rp_valid              (dut_rxm_bar0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (dut_rxm_bar0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (dut_rxm_bar0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (dut_rxm_bar0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (dut_rxm_bar0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (dut_rxm_bar0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dut_cra_agent (
		.clk                     (DUT_coreclkout_clk),                              //             clk.clk
		.reset                   (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dut_cra_agent_m0_address),                        //              m0.address
		.m0_burstcount           (dut_cra_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (dut_cra_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (dut_cra_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (dut_cra_agent_m0_lock),                           //                .lock
		.m0_readdata             (dut_cra_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (dut_cra_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (dut_cra_agent_m0_read),                           //                .read
		.m0_waitrequest          (dut_cra_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (dut_cra_agent_m0_writedata),                      //                .writedata
		.m0_write                (dut_cra_agent_m0_write),                          //                .write
		.rp_endofpacket          (dut_cra_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (dut_cra_agent_rp_ready),                          //                .ready
		.rp_valid                (dut_cra_agent_rp_valid),                          //                .valid
		.rp_data                 (dut_cra_agent_rp_data),                           //                .data
		.rp_startofpacket        (dut_cra_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (dut_cra_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (dut_cra_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (dut_cra_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (dut_cra_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (dut_cra_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (dut_cra_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (dut_cra_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (dut_cra_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (dut_cra_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (dut_cra_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (dut_cra_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (dut_cra_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (dut_cra_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (dut_cra_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (dut_cra_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (dut_cra_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (dut_cra_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dut_cra_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (dut_cra_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dut_cra_agent_rsp_fifo (
		.clk               (DUT_coreclkout_clk),                              //       clk.clk
		.reset             (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dut_cra_agent_rf_source_data),                    //        in.data
		.in_valid          (dut_cra_agent_rf_source_valid),                   //          .valid
		.in_ready          (dut_cra_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (dut_cra_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (dut_cra_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (dut_cra_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (dut_cra_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (dut_cra_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (dut_cra_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (dut_cra_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_if_ddr3_emif_1_csr_agent (
		.clk                     (mem_if_ddr3_emif_1_afi_clk_clk),                                      //             clk.clk
		.reset                   (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_1_csr_agent_m0_address),                             //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_1_csr_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_1_csr_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_1_csr_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_1_csr_agent_m0_lock),                                //                .lock
		.m0_readdata             (mem_if_ddr3_emif_1_csr_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_1_csr_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_1_csr_agent_m0_read),                                //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_1_csr_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_1_csr_agent_m0_writedata),                           //                .writedata
		.m0_write                (mem_if_ddr3_emif_1_csr_agent_m0_write),                               //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_1_csr_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_1_csr_agent_rp_ready),                               //                .ready
		.rp_valid                (mem_if_ddr3_emif_1_csr_agent_rp_valid),                               //                .valid
		.rp_data                 (mem_if_ddr3_emif_1_csr_agent_rp_data),                                //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_1_csr_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (mem_if_ddr3_emif_1_csr_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (mem_if_ddr3_emif_1_csr_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (mem_if_ddr3_emif_1_csr_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (mem_if_ddr3_emif_1_csr_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (mem_if_ddr3_emif_1_csr_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (mem_if_ddr3_emif_1_csr_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (mem_if_ddr3_emif_1_csr_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_1_csr_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_1_csr_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_1_csr_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_1_csr_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_1_csr_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_1_csr_agent_rf_source_data),                         //        in.data
		.in_valid          (mem_if_ddr3_emif_1_csr_agent_rf_source_valid),                        //          .valid
		.in_ready          (mem_if_ddr3_emif_1_csr_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_1_csr_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_1_csr_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_1_csr_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_1_csr_agent_rdata_fifo (
		.clk               (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_if_ddr3_emif_0_csr_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),                                      //             clk.clk
		.reset                   (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_csr_agent_m0_address),                             //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_csr_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_csr_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_csr_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_csr_agent_m0_lock),                                //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_csr_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_csr_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_csr_agent_m0_read),                                //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_csr_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_csr_agent_m0_writedata),                           //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_csr_agent_m0_write),                               //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_csr_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_csr_agent_rp_ready),                               //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_csr_agent_rp_valid),                               //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_csr_agent_rp_data),                                //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_csr_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (mem_if_ddr3_emif_0_csr_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (mem_if_ddr3_emif_0_csr_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (mem_if_ddr3_emif_0_csr_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (mem_if_ddr3_emif_0_csr_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (mem_if_ddr3_emif_0_csr_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (mem_if_ddr3_emif_0_csr_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_csr_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_csr_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_csr_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_csr_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_csr_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_csr_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_csr_agent_rf_source_data),                         //        in.data
		.in_valid          (mem_if_ddr3_emif_0_csr_agent_rf_source_valid),                        //          .valid
		.in_ready          (mem_if_ddr3_emif_0_csr_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_csr_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_csr_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_csr_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_csr_agent_rdata_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (124),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (126),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (128),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_to_asmi_0_s0_agent (
		.clk                     (DUT_coreclkout_clk),                                   //             clk.clk
		.reset                   (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (avl_to_asmi_0_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (avl_to_asmi_0_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (avl_to_asmi_0_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (avl_to_asmi_0_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (avl_to_asmi_0_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (avl_to_asmi_0_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (avl_to_asmi_0_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (avl_to_asmi_0_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (avl_to_asmi_0_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (avl_to_asmi_0_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (avl_to_asmi_0_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (avl_to_asmi_0_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (avl_to_asmi_0_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (avl_to_asmi_0_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (avl_to_asmi_0_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (avl_to_asmi_0_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (avl_to_asmi_0_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (avl_to_asmi_0_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (avl_to_asmi_0_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (avl_to_asmi_0_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (avl_to_asmi_0_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (avl_to_asmi_0_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (avl_to_asmi_0_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (avl_to_asmi_0_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (avl_to_asmi_0_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (avl_to_asmi_0_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (avl_to_asmi_0_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (avl_to_asmi_0_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (avl_to_asmi_0_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (avl_to_asmi_0_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (avl_to_asmi_0_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (avl_to_asmi_0_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (avl_to_asmi_0_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_to_asmi_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (avl_to_asmi_0_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_to_asmi_0_s0_agent_rsp_fifo (
		.clk               (DUT_coreclkout_clk),                                //       clk.clk
		.reset             (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (avl_to_asmi_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avl_to_asmi_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_to_asmi_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_to_asmi_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_to_asmi_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_to_asmi_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_to_asmi_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_to_asmi_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_to_asmi_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_to_asmi_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_to_asmi_0_s0_agent_rdata_fifo (
		.clk               (DUT_coreclkout_clk),                              //       clk.clk
		.reset             (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_to_asmi_0_s0_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (avl_to_asmi_0_s0_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (avl_to_asmi_0_s0_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (avl_to_asmi_0_s0_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (avl_to_asmi_0_s0_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (avl_to_asmi_0_s0_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	pcie_hip_avmm_mm_interconnect_0_router router (
		.sink_ready         (dut_rxm_bar0_agent_cp_ready),                     //      sink.ready
		.sink_valid         (dut_rxm_bar0_agent_cp_valid),                     //          .valid
		.sink_data          (dut_rxm_bar0_agent_cp_data),                      //          .data
		.sink_startofpacket (dut_rxm_bar0_agent_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (dut_rxm_bar0_agent_cp_endofpacket),               //          .endofpacket
		.clk                (DUT_coreclkout_clk),                              //       clk.clk
		.reset              (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (dut_cra_agent_rp_ready),                          //      sink.ready
		.sink_valid         (dut_cra_agent_rp_valid),                          //          .valid
		.sink_data          (dut_cra_agent_rp_data),                           //          .data
		.sink_startofpacket (dut_cra_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (dut_cra_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (DUT_coreclkout_clk),                              //       clk.clk
		.reset              (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                            //       src.ready
		.src_valid          (router_001_src_valid),                            //          .valid
		.src_data           (router_001_src_data),                             //          .data
		.src_channel        (router_001_src_channel),                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (mem_if_ddr3_emif_1_csr_agent_rp_ready),                               //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_1_csr_agent_rp_valid),                               //          .valid
		.sink_data          (mem_if_ddr3_emif_1_csr_agent_rp_data),                                //          .data
		.sink_startofpacket (mem_if_ddr3_emif_1_csr_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_1_csr_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //       src.ready
		.src_valid          (router_002_src_valid),                                                //          .valid
		.src_data           (router_002_src_data),                                                 //          .data
		.src_channel        (router_002_src_channel),                                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (mem_if_ddr3_emif_0_csr_agent_rp_ready),                               //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_csr_agent_rp_valid),                               //          .valid
		.sink_data          (mem_if_ddr3_emif_0_csr_agent_rp_data),                                //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_csr_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_csr_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                //       src.ready
		.src_valid          (router_003_src_valid),                                                //          .valid
		.src_data           (router_003_src_data),                                                 //          .data
		.src_channel        (router_003_src_channel),                                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                           //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (avl_to_asmi_0_s0_agent_rp_ready),                 //      sink.ready
		.sink_valid         (avl_to_asmi_0_s0_agent_rp_valid),                 //          .valid
		.sink_data          (avl_to_asmi_0_s0_agent_rp_data),                  //          .data
		.sink_startofpacket (avl_to_asmi_0_s0_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (avl_to_asmi_0_s0_agent_rp_endofpacket),           //          .endofpacket
		.clk                (DUT_coreclkout_clk),                              //       clk.clk
		.reset              (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (237),
		.PKT_DEST_ID_L             (236),
		.PKT_SRC_ID_H              (235),
		.PKT_SRC_ID_L              (234),
		.PKT_BYTE_CNT_H            (223),
		.PKT_BYTE_CNT_L            (214),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (209),
		.PKT_TRANS_WRITE           (210),
		.MAX_OUTSTANDING_RESPONSES (70),
		.PIPELINED                 (0),
		.ST_DATA_W                 (251),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dut_rxm_bar0_limiter (
		.clk                    (DUT_coreclkout_clk),                              //       clk.clk
		.reset                  (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //          .valid
		.cmd_sink_data          (router_src_data),                                 //          .data
		.cmd_sink_channel       (router_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (dut_rxm_bar0_limiter_cmd_src_ready),              //   cmd_src.ready
		.cmd_src_data           (dut_rxm_bar0_limiter_cmd_src_data),               //          .data
		.cmd_src_channel        (dut_rxm_bar0_limiter_cmd_src_channel),            //          .channel
		.cmd_src_startofpacket  (dut_rxm_bar0_limiter_cmd_src_startofpacket),      //          .startofpacket
		.cmd_src_endofpacket    (dut_rxm_bar0_limiter_cmd_src_endofpacket),        //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (dut_rxm_bar0_limiter_rsp_src_ready),              //   rsp_src.ready
		.rsp_src_valid          (dut_rxm_bar0_limiter_rsp_src_valid),              //          .valid
		.rsp_src_data           (dut_rxm_bar0_limiter_rsp_src_data),               //          .data
		.rsp_src_channel        (dut_rxm_bar0_limiter_rsp_src_channel),            //          .channel
		.rsp_src_startofpacket  (dut_rxm_bar0_limiter_rsp_src_startofpacket),      //          .startofpacket
		.rsp_src_endofpacket    (dut_rxm_bar0_limiter_rsp_src_endofpacket),        //          .endofpacket
		.cmd_src_valid          (dut_rxm_bar0_limiter_cmd_valid_data)              // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (124),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (108),
		.OUT_BURSTWRAP_H           (116),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) dut_cra_burst_adapter (
		.clk                   (DUT_coreclkout_clk),                              //       cr0.clk
		.reset                 (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (dut_cra_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (dut_cra_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (dut_cra_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (dut_cra_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (dut_cra_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (dut_cra_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (dut_cra_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (dut_cra_burst_adapter_source0_data),              //          .data
		.source0_channel       (dut_cra_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (dut_cra_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (dut_cra_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (dut_cra_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (124),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (108),
		.OUT_BURSTWRAP_H           (116),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) mem_if_ddr3_emif_1_csr_burst_adapter (
		.clk                   (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       cr0.clk
		.reset                 (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (mem_if_ddr3_emif_1_csr_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (mem_if_ddr3_emif_1_csr_burst_adapter_source0_data),                   //          .data
		.source0_channel       (mem_if_ddr3_emif_1_csr_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (mem_if_ddr3_emif_1_csr_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (mem_if_ddr3_emif_1_csr_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (mem_if_ddr3_emif_1_csr_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (124),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (108),
		.OUT_BURSTWRAP_H           (116),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) mem_if_ddr3_emif_0_csr_burst_adapter (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       cr0.clk
		.reset                 (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (mem_if_ddr3_emif_0_csr_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (mem_if_ddr3_emif_0_csr_burst_adapter_source0_data),                   //          .data
		.source0_channel       (mem_if_ddr3_emif_0_csr_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (mem_if_ddr3_emif_0_csr_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (mem_if_ddr3_emif_0_csr_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (mem_if_ddr3_emif_0_csr_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (124),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (119),
		.PKT_BURST_SIZE_L          (117),
		.PKT_BURST_TYPE_H          (121),
		.PKT_BURST_TYPE_L          (120),
		.PKT_BURSTWRAP_H           (116),
		.PKT_BURSTWRAP_L           (116),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (108),
		.OUT_BURSTWRAP_H           (116),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) avl_to_asmi_0_s0_burst_adapter (
		.clk                   (DUT_coreclkout_clk),                                   //       cr0.clk
		.reset                 (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (avl_to_asmi_0_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (avl_to_asmi_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (avl_to_asmi_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (avl_to_asmi_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (avl_to_asmi_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (avl_to_asmi_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (avl_to_asmi_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_to_asmi_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_to_asmi_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_to_asmi_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_to_asmi_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_to_asmi_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	pcie_hip_avmm_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (DUT_coreclkout_clk),                              //        clk.clk
		.reset              (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (dut_rxm_bar0_limiter_cmd_src_ready),              //       sink.ready
		.sink_channel       (dut_rxm_bar0_limiter_cmd_src_channel),            //           .channel
		.sink_data          (dut_rxm_bar0_limiter_cmd_src_data),               //           .data
		.sink_startofpacket (dut_rxm_bar0_limiter_cmd_src_startofpacket),      //           .startofpacket
		.sink_endofpacket   (dut_rxm_bar0_limiter_cmd_src_endofpacket),        //           .endofpacket
		.sink_valid         (dut_rxm_bar0_limiter_cmd_valid_data),             // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //           .valid
		.src0_data          (cmd_demux_src0_data),                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                            //           .valid
		.src1_data          (cmd_demux_src1_data),                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                      //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                            //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                            //           .valid
		.src2_data          (cmd_demux_src2_data),                             //           .data
		.src2_channel       (cmd_demux_src2_channel),                          //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                      //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                            //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                            //           .valid
		.src3_data          (cmd_demux_src3_data),                             //           .data
		.src3_channel       (cmd_demux_src3_channel),                          //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                       //           .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (DUT_coreclkout_clk),                              //       clk.clk
		.reset               (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset               (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                                 //          .channel
		.sink0_data          (crosser_out_data),                                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                              //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset               (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                               //          .valid
		.sink0_channel       (crosser_001_out_channel),                                             //          .channel
		.sink0_data          (crosser_001_out_data),                                                //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                          //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (DUT_coreclkout_clk),                              //       clk.clk
		.reset               (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                           //          .valid
		.src_data            (cmd_mux_003_src_data),                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                          //          .channel
		.sink0_data          (cmd_demux_src3_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (DUT_coreclkout_clk),                              //       clk.clk
		.reset              (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (dut_cra_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (dut_cra_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (dut_cra_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (dut_cra_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dut_cra_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (dut_cra_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_src0_data),                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                       //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (DUT_coreclkout_clk),                                   //       clk.clk
		.reset              (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (avl_to_asmi_0_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (avl_to_asmi_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (avl_to_asmi_0_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (avl_to_asmi_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (avl_to_asmi_0_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (avl_to_asmi_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_003_src0_data),                              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                        //          .endofpacket
	);

	pcie_hip_avmm_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (DUT_coreclkout_clk),                              //       clk.clk
		.reset               (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_src_valid),                               //          .valid
		.src_data            (rsp_mux_src_data),                                //          .data
		.src_channel         (rsp_mux_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                            //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                          //          .channel
		.sink0_data          (rsp_demux_src0_data),                             //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                      //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                           //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                           //          .valid
		.sink1_channel       (crosser_002_out_channel),                         //          .channel
		.sink1_data          (crosser_002_out_data),                            //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket),                     //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                           //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                           //          .valid
		.sink2_channel       (crosser_003_out_channel),                         //          .channel
		.sink2_data          (crosser_003_out_data),                            //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket),                     //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                        //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                        //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                      //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                         //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                   //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (207),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (223),
		.OUT_PKT_BYTE_CNT_L            (214),
		.OUT_PKT_TRANS_COMPRESSED_READ (208),
		.OUT_PKT_BURST_SIZE_H          (227),
		.OUT_PKT_BURST_SIZE_L          (225),
		.OUT_PKT_RESPONSE_STATUS_H     (247),
		.OUT_PKT_RESPONSE_STATUS_L     (246),
		.OUT_PKT_TRANS_EXCLUSIVE       (213),
		.OUT_PKT_BURST_TYPE_H          (229),
		.OUT_PKT_BURST_TYPE_L          (228),
		.OUT_PKT_ORI_BURST_SIZE_L      (248),
		.OUT_PKT_ORI_BURST_SIZE_H      (250),
		.OUT_ST_DATA_W                 (251),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dut_cra_rsp_width_adapter (
		.clk                  (DUT_coreclkout_clk),                              //       clk.clk
		.reset                (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                            //      sink.valid
		.in_channel           (router_001_src_channel),                          //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                      //          .endofpacket
		.in_ready             (router_001_src_ready),                            //          .ready
		.in_data              (router_001_src_data),                             //          .data
		.out_endofpacket      (dut_cra_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (dut_cra_rsp_width_adapter_src_data),              //          .data
		.out_channel          (dut_cra_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (dut_cra_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (dut_cra_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (dut_cra_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (207),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (223),
		.OUT_PKT_BYTE_CNT_L            (214),
		.OUT_PKT_TRANS_COMPRESSED_READ (208),
		.OUT_PKT_BURST_SIZE_H          (227),
		.OUT_PKT_BURST_SIZE_L          (225),
		.OUT_PKT_RESPONSE_STATUS_H     (247),
		.OUT_PKT_RESPONSE_STATUS_L     (246),
		.OUT_PKT_TRANS_EXCLUSIVE       (213),
		.OUT_PKT_BURST_TYPE_H          (229),
		.OUT_PKT_BURST_TYPE_L          (228),
		.OUT_PKT_ORI_BURST_SIZE_L      (248),
		.OUT_PKT_ORI_BURST_SIZE_H      (250),
		.OUT_ST_DATA_W                 (251),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_1_csr_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                //      sink.valid
		.in_channel           (router_002_src_channel),                                              //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                          //          .endofpacket
		.in_ready             (router_002_src_ready),                                                //          .ready
		.in_data              (router_002_src_data),                                                 //          .data
		.out_endofpacket      (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_1_csr_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (207),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (223),
		.OUT_PKT_BYTE_CNT_L            (214),
		.OUT_PKT_TRANS_COMPRESSED_READ (208),
		.OUT_PKT_BURST_SIZE_H          (227),
		.OUT_PKT_BURST_SIZE_L          (225),
		.OUT_PKT_RESPONSE_STATUS_H     (247),
		.OUT_PKT_RESPONSE_STATUS_L     (246),
		.OUT_PKT_TRANS_EXCLUSIVE       (213),
		.OUT_PKT_BURST_TYPE_H          (229),
		.OUT_PKT_BURST_TYPE_L          (228),
		.OUT_PKT_ORI_BURST_SIZE_L      (248),
		.OUT_PKT_ORI_BURST_SIZE_H      (250),
		.OUT_ST_DATA_W                 (251),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_csr_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_003_src_valid),                                                //      sink.valid
		.in_channel           (router_003_src_channel),                                              //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                          //          .endofpacket
		.in_ready             (router_003_src_ready),                                                //          .ready
		.in_data              (router_003_src_data),                                                 //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_csr_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (116),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (119),
		.IN_PKT_BURST_SIZE_L           (117),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (121),
		.IN_PKT_BURST_TYPE_L           (120),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (207),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (223),
		.OUT_PKT_BYTE_CNT_L            (214),
		.OUT_PKT_TRANS_COMPRESSED_READ (208),
		.OUT_PKT_BURST_SIZE_H          (227),
		.OUT_PKT_BURST_SIZE_L          (225),
		.OUT_PKT_RESPONSE_STATUS_H     (247),
		.OUT_PKT_RESPONSE_STATUS_L     (246),
		.OUT_PKT_TRANS_EXCLUSIVE       (213),
		.OUT_PKT_BURST_TYPE_H          (229),
		.OUT_PKT_BURST_TYPE_L          (228),
		.OUT_PKT_ORI_BURST_SIZE_L      (248),
		.OUT_PKT_ORI_BURST_SIZE_H      (250),
		.OUT_ST_DATA_W                 (251),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) avl_to_asmi_0_s0_rsp_width_adapter (
		.clk                  (DUT_coreclkout_clk),                                   //       clk.clk
		.reset                (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_004_src_valid),                                 //      sink.valid
		.in_channel           (router_004_src_channel),                               //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                           //          .endofpacket
		.in_ready             (router_004_src_ready),                                 //          .ready
		.in_data              (router_004_src_data),                                  //          .data
		.out_endofpacket      (avl_to_asmi_0_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avl_to_asmi_0_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (avl_to_asmi_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (avl_to_asmi_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (avl_to_asmi_0_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avl_to_asmi_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (207),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (223),
		.IN_PKT_BYTE_CNT_L             (214),
		.IN_PKT_TRANS_COMPRESSED_READ  (208),
		.IN_PKT_TRANS_WRITE            (210),
		.IN_PKT_BURSTWRAP_H            (224),
		.IN_PKT_BURSTWRAP_L            (224),
		.IN_PKT_BURST_SIZE_H           (227),
		.IN_PKT_BURST_SIZE_L           (225),
		.IN_PKT_RESPONSE_STATUS_H      (247),
		.IN_PKT_RESPONSE_STATUS_L      (246),
		.IN_PKT_TRANS_EXCLUSIVE        (213),
		.IN_PKT_BURST_TYPE_H           (229),
		.IN_PKT_BURST_TYPE_L           (228),
		.IN_PKT_ORI_BURST_SIZE_L       (248),
		.IN_PKT_ORI_BURST_SIZE_H       (250),
		.IN_ST_DATA_W                  (251),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dut_cra_cmd_width_adapter (
		.clk                  (DUT_coreclkout_clk),                              //       clk.clk
		.reset                (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                               //      sink.valid
		.in_channel           (cmd_mux_src_channel),                             //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                       //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                         //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                               //          .ready
		.in_data              (cmd_mux_src_data),                                //          .data
		.out_endofpacket      (dut_cra_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (dut_cra_cmd_width_adapter_src_data),              //          .data
		.out_channel          (dut_cra_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (dut_cra_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (dut_cra_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (dut_cra_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (207),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (223),
		.IN_PKT_BYTE_CNT_L             (214),
		.IN_PKT_TRANS_COMPRESSED_READ  (208),
		.IN_PKT_TRANS_WRITE            (210),
		.IN_PKT_BURSTWRAP_H            (224),
		.IN_PKT_BURSTWRAP_L            (224),
		.IN_PKT_BURST_SIZE_H           (227),
		.IN_PKT_BURST_SIZE_L           (225),
		.IN_PKT_RESPONSE_STATUS_H      (247),
		.IN_PKT_RESPONSE_STATUS_L      (246),
		.IN_PKT_TRANS_EXCLUSIVE        (213),
		.IN_PKT_BURST_TYPE_H           (229),
		.IN_PKT_BURST_TYPE_L           (228),
		.IN_PKT_ORI_BURST_SIZE_L       (248),
		.IN_PKT_ORI_BURST_SIZE_H       (250),
		.IN_ST_DATA_W                  (251),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_1_csr_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                               //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                             //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                               //          .ready
		.in_data              (cmd_mux_001_src_data),                                                //          .data
		.out_endofpacket      (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_1_csr_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (207),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (223),
		.IN_PKT_BYTE_CNT_L             (214),
		.IN_PKT_TRANS_COMPRESSED_READ  (208),
		.IN_PKT_TRANS_WRITE            (210),
		.IN_PKT_BURSTWRAP_H            (224),
		.IN_PKT_BURSTWRAP_L            (224),
		.IN_PKT_BURST_SIZE_H           (227),
		.IN_PKT_BURST_SIZE_L           (225),
		.IN_PKT_RESPONSE_STATUS_H      (247),
		.IN_PKT_RESPONSE_STATUS_L      (246),
		.IN_PKT_TRANS_EXCLUSIVE        (213),
		.IN_PKT_BURST_TYPE_H           (229),
		.IN_PKT_BURST_TYPE_L           (228),
		.IN_PKT_ORI_BURST_SIZE_L       (248),
		.IN_PKT_ORI_BURST_SIZE_H       (250),
		.IN_ST_DATA_W                  (251),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_csr_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset                (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                               //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                             //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                               //          .ready
		.in_data              (cmd_mux_002_src_data),                                                //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_csr_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (207),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (223),
		.IN_PKT_BYTE_CNT_L             (214),
		.IN_PKT_TRANS_COMPRESSED_READ  (208),
		.IN_PKT_TRANS_WRITE            (210),
		.IN_PKT_BURSTWRAP_H            (224),
		.IN_PKT_BURSTWRAP_L            (224),
		.IN_PKT_BURST_SIZE_H           (227),
		.IN_PKT_BURST_SIZE_L           (225),
		.IN_PKT_RESPONSE_STATUS_H      (247),
		.IN_PKT_RESPONSE_STATUS_L      (246),
		.IN_PKT_TRANS_EXCLUSIVE        (213),
		.IN_PKT_BURST_TYPE_H           (229),
		.IN_PKT_BURST_TYPE_L           (228),
		.IN_PKT_ORI_BURST_SIZE_L       (248),
		.IN_PKT_ORI_BURST_SIZE_H       (250),
		.IN_ST_DATA_W                  (251),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (119),
		.OUT_PKT_BURST_SIZE_L          (117),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (121),
		.OUT_PKT_BURST_TYPE_L          (120),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) avl_to_asmi_0_s0_cmd_width_adapter (
		.clk                  (DUT_coreclkout_clk),                                   //       clk.clk
		.reset                (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                              //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                          //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                //          .ready
		.in_data              (cmd_mux_003_src_data),                                 //          .data
		.out_endofpacket      (avl_to_asmi_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avl_to_asmi_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (avl_to_asmi_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (avl_to_asmi_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (avl_to_asmi_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avl_to_asmi_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (251),
		.BITS_PER_SYMBOL     (251),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (DUT_coreclkout_clk),                                                  //        in_clk.clk
		.in_reset          (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (mem_if_ddr3_emif_1_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                              //              .channel
		.in_data           (cmd_demux_src1_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (251),
		.BITS_PER_SYMBOL     (251),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (DUT_coreclkout_clk),                                                  //        in_clk.clk
		.in_reset          (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                              //              .channel
		.in_data           (cmd_demux_src2_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (251),
		.BITS_PER_SYMBOL     (251),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (mem_if_ddr3_emif_1_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (DUT_coreclkout_clk),                                                  //       out_clk.clk
		.out_reset         (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_001_src0_data),                                             //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (251),
		.BITS_PER_SYMBOL     (251),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (mem_if_ddr3_emif_0_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (DUT_coreclkout_clk),                                                  //       out_clk.clk
		.out_reset         (avl_to_asmi_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_002_src0_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	pcie_hip_avmm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (DUT_coreclkout_clk),                              // in_clk_0.clk
		.in_rst_0_reset (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dut_cra_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (dut_cra_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (dut_cra_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

	pcie_hip_avmm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (mem_if_ddr3_emif_1_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mem_if_ddr3_emif_1_csr_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (mem_if_ddr3_emif_1_csr_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                    //         .error
	);

	pcie_hip_avmm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mem_if_ddr3_emif_0_csr_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (mem_if_ddr3_emif_0_csr_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                    //         .error
	);

	pcie_hip_avmm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (DUT_coreclkout_clk),                              // in_clk_0.clk
		.in_rst_0_reset (avl_to_asmi_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_to_asmi_0_s0_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (avl_to_asmi_0_s0_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (avl_to_asmi_0_s0_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                //         .error
	);

endmodule
